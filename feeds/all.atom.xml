<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>lizherui的程序世界</title><link href="http://www.lizherui.com/" rel="alternate"></link><link href="http://www.lizherui.com/feeds/all.atom.xml" rel="self"></link><id>http://www.lizherui.com/</id><updated>2013-10-07T00:00:00+08:00</updated><entry><title>在cgdb中进行I/O交互</title><link href="http://www.lizherui.com/pages/2013/10/07/io_in_cgdb.html" rel="alternate"></link><updated>2013-10-07T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-10-07:pages/2013/10/07/io_in_cgdb.html</id><summary type="html">&lt;p&gt;cgdb，gdb -tui的加强版，非常优秀，中文教程在此：&lt;a href="https://github.com/leeyiw/cgdb-manual-in-chinese/blob/master/contents.md"&gt;https://github.com/leeyiw/cgdb-manual-in-chinese/blob/master/contents.md&lt;/a&gt;，不再赘述。&lt;/p&gt;
&lt;p&gt;cgdb有一个问题困扰了我很久：如何方便地进行I/O交互。&lt;/p&gt;
&lt;p&gt;虽然cgdb自带了TTY模式，但不太靠谱，调试到某些Unix I/O接口时会卡死，如read函数。&lt;/p&gt;
&lt;p&gt;今天我又反复看了下教程，发现了这样一句以前没注意的忠告：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果被调试的程序需要读取终端用户输入，我们推荐用户在终端中启动被调试程序，然后在另一个终端使用CGDB去attach被调试程序，这是与被调试程序进行I/O交互最简单的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是教程没有说具体该怎么操作，摸索了下，终于完美解决，以调试redis-cli为例。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;命令行先后启动redis-server和redis-cli；&lt;/li&gt;
&lt;li&gt;ps查到redis-cli进程号后直接cgdb -p [pid]；
&lt;img alt="" src="https://lh6.googleusercontent.com/-5Eq0HZugi_0/UlGfDvp545I/AAAAAAAAASE/EUUwYqy23aY/w788-h124-no/Screen+Shot+2013-10-07+at+1.33.30+AM.png" /&gt;&lt;/li&gt;
&lt;li&gt;进入cgdb后不要慌，用bt看下阻塞I/O在哪里；
&lt;img alt="" src="https://lh4.googleusercontent.com/-g3Mq_Eg2aGI/UlGf0iupLjI/AAAAAAAAASY/rApjcwZpibw/w958-h112-no/Screen+Shot+2013-10-07+at+1.36.55+AM.png" /&gt;&lt;/li&gt;
&lt;li&gt;然后在阻塞I/O处设置断点，可以看到这里在linenoise.c的312行调用了read()，直接加断点b linenoise.c:312；&lt;/li&gt;
&lt;li&gt;cgdb中输入continue，然后再去redis-cli那里输入想调试的命令，比如info，回到cgdb，发现源码已经刷出来了，大功告成。
&lt;img alt="" src="https://lh4.googleusercontent.com/-2k_4-6EXv1I/UlGhLX__87I/AAAAAAAAATA/2PIFr0YZv8c/w958-h599-no/Screen+Shot+2013-10-07+at+1.42.54+AM.png" /&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="cgdb"></category></entry><entry><title>罗斯归来</title><link href="http://www.lizherui.com/pages/2013/10/06/Rose_is_back.html" rel="alternate"></link><updated>2013-10-06T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-10-06:pages/2013/10/06/Rose_is_back.html</id><summary type="html">&lt;p&gt;罗斯是我最喜欢的NBA球员，快速且强壮，球风硬朗，极富侵略性。&lt;/p&gt;
&lt;p&gt;罗斯因伤休战了整整523天，终于在今天复出了。&lt;/p&gt;
&lt;p&gt;看罗斯打球有种独一无二的感觉，观赏性极强，速度与力量的完美结合。&lt;/p&gt;
&lt;p&gt;罗斯快攻时的态度一直激励着我：甭管前面站着多高多壮的球员，统统硬上。&lt;/p&gt;
&lt;p&gt;Too Big, Too Strong, Too Fast, Too Good.&lt;/p&gt;
&lt;iframe width="480" height="405" src="http://www.56.com/iframe/OTgxNTU1MDI" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;</summary><category term="罗斯"></category><category term="NBA"></category></entry><entry><title>临近的双十一</title><link href="http://www.lizherui.com/pages/2013/09/27/coming_November_11.html" rel="alternate"></link><updated>2013-09-27T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-09-27:pages/2013/09/27/coming_November_11.html</id><summary type="html">&lt;p&gt;双十一就要来了。&lt;/p&gt;
&lt;p&gt;由于我们小组leader是双十一总负责人，所以我很幸运地参与到双十一相关的项目中。&lt;/p&gt;
&lt;p&gt;作为一个新人，虽然只能做一点儿双十一相关的小需求，但依然很激动。&lt;/p&gt;
&lt;p&gt;生活中常常听到这样的说法：“总有人比你们更勤奋”。&lt;/p&gt;
&lt;p&gt;但这句话就不用对我们说了。&lt;/p&gt;
&lt;p&gt;我们就是那更勤奋的人。&lt;/p&gt;
&lt;iframe height=360 width=640 src="http://vodcdn.video.taobao.com/player/ugc/tb_ugc_pieces_core_player_loader.swf?version=1.0.20130926&amp;vid=10653872&amp;uid=1067522205&amp;p=1&amp;t=1&amp;rid=&amp;random=6666&amp;autoplay=false" frameborder=0 quality="best" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="天猫"></category><category term="双十一"></category></entry><entry><title>淘宝城的第一天</title><link href="http://www.lizherui.com/pages/2013/09/16/taobao_city.html" rel="alternate"></link><updated>2013-09-16T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-09-16:pages/2013/09/16/taobao_city.html</id><summary type="html">&lt;p&gt;淘宝城，震撼。&lt;/p&gt;
&lt;p&gt;从整体到局部，处处高端大气上档次，很有硅谷范儿。&lt;/p&gt;
&lt;p&gt;我说淘宝城绝对是中国IT届的旗帜，应该没人会反对。&lt;/p&gt;
&lt;p&gt;在这种环境里工作的感受，很难描述。&lt;/p&gt;
&lt;p&gt;就像一种瘾。&lt;/p&gt;
&lt;p&gt;因为公司给予员工越多，员工回报公司就越多。&lt;/p&gt;
&lt;p&gt;越来越感觉温暖，越来越喜欢这里。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/vBF-iWApPvDU7FMEr-eKzZHE8pnOfaNskczdPzYtxic=w640-h426-no" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://lh6.googleusercontent.com/-fmBa83XSd-g/Uje603YOzLI/AAAAAAAAAP8/qx2BzKau3OY/w600-h338-no/5.bmp" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/5y0vvxNT8vKB72ec5CHlm4XQq9rHbpQPooCvEehftFs=w600-h338-no" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/-aRJUA4HnDVY/Uje6289hfJI/AAAAAAAAAQM/QuOanv1h308/w600-h338-no/7.bmp" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/-jJMuMiRfmWE/Uje61Q73ADI/AAAAAAAAAQA/Tv3FlGCV6D4/w600-h338-no/6.bmp" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/DxvTtYr0EjXcbcX8GA_NLTDsZESVM3D5bpXDUbeETgo=w640-h426-no" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/6xPghXTVGqNFv16_4eJeLrWMZOcXA78zofDrsU13cL0=w640-h426-no" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/-c15ivY4h-jk/Ujcv1XCHdGI/AAAAAAAAAPU/Oo7BmwvMOdI/w640-h426-no/nEO_IMG_4%25E5%258F%25B7%25E6%25A5%25BC++%25E8%25BF%2591.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://lh4.googleusercontent.com/-9t3GDAPdWGc/UjctHufr7XI/AAAAAAAAAOw/KcONF5Z8Idw/w568-h612-no/nEO_IMG_%25E6%25B0%25B4%25E5%25A1%2598.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://lh6.googleusercontent.com/HMT4bu0qsmamFevY_Uia8mIMke201AbsLpZueNL0k-U=w600-h338-no" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/GEbGoguUI1z2u_A4rP_wrH3IRxZswxt5ZfhmJzHMBDU=w600-h338-no" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://lh4.googleusercontent.com/-viYkjgbW6aQ/UjfCMTSGj5I/AAAAAAAAAQk/ZvWeD2ikIo0/w792-h594-no/20130809132058540.JPG" /&gt;&lt;/p&gt;</summary><category term="淘宝城"></category></entry><entry><title>百阿感言</title><link href="http://www.lizherui.com/pages/2013/09/05/bai_nian_ali.html" rel="alternate"></link><updated>2013-09-05T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-09-05:pages/2013/09/05/bai_nian_ali.html</id><summary type="html">&lt;h2&gt;背景&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;来阿里之前，阿里“很黄很暴力”的开放风骚型文化就已经在江湖上声名远扬了。&lt;/p&gt;
&lt;p&gt;记得参加13届校招那会儿，阿里的面试风格就让人印象深刻。与其它互联网公司面试官一脸严肃的风格不同，阿里的面试官不仅极其健谈，而且不停地和候选人互开玩笑，让我惊讶了很久很久。&lt;/p&gt;
&lt;p&gt;这样的氛围对于我们应届生来说无疑产生了极强的震撼力与极大的吸引力。&lt;/p&gt;
&lt;h2&gt;临行前&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;平时和师兄师姐吃饭的时候，他们聊到百阿总是故作神秘，欲言又止，吊足了我的胃口。&lt;/p&gt;
&lt;p&gt;晚上在内网上搜了搜百阿相关的帖子，预览了下诸如“破冰”这样神秘而刺激的传说级活动。&lt;/p&gt;
&lt;p&gt;明天就要亲身经历了，既期待又紧张。&lt;/p&gt;
&lt;h2&gt;第一天&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3&gt;新人破冰&lt;/h3&gt;
&lt;p&gt;刚进教室我就惊呆了，没想到是一组人围坐一张圆桌的形式，好像回到了小时候上幼儿园的日子。&lt;/p&gt;
&lt;p&gt;迟到的那几个倒霉家伙自然成为了破冰活动的主角，气氛一下子活跃了起来。&lt;/p&gt;
&lt;p&gt;不过我感觉这次破冰倒是没有传说中那么得无底限。或许是因为mm来自海峡两岸中的宝岛台湾，或许是因为大家互相之间还不太熟，没有完全放开。&lt;/p&gt;
&lt;p&gt;破冰的尺度恰到火候，既没有传说中的那样夸张，又彻底开启了欢乐的百阿之门。&lt;/p&gt;
&lt;h3&gt;侠骨柔情&lt;/h3&gt;
&lt;p&gt;每个人都要写一个愿望，我想了很久很久都没有头绪。最后快没时间了，只好写了一个极难实现的愿望。&lt;/p&gt;
&lt;p&gt;幸运的是，我抽到了一个很简单的愿望，心里的石头总算落了地。&lt;/p&gt;
&lt;p&gt;这个小活动第一天给人的感觉就是很简单，乐呵乐呵随便玩玩。&lt;/p&gt;
&lt;p&gt;但是最后一天每个人愿望揭晓的时候，震撼的一面才彻底显现了出来。&lt;/p&gt;
&lt;p&gt;大家发现有些同学的愿望是那么得难实现。&lt;/p&gt;
&lt;p&gt;但是无论愿望有多难，每个小天使都会想尽一切办法去实现它。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;难不可怕，怕才可怕。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;拓展训练&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;好像回到了大学军训的时候。&lt;/p&gt;
&lt;p&gt;一共玩了四个项目，其中的两个别有一番风味。&lt;/p&gt;
&lt;h3&gt;高空抓杠&lt;/h3&gt;
&lt;p&gt;说起来很简单，爬到大概10米高的杆顶，然后跳起来抓住半空中的单杠，完事。&lt;/p&gt;
&lt;p&gt;我算是比较爱运动、胆子也比较大的，但是当我爬到杆顶时，情况还是出乎了我的意料。&lt;/p&gt;
&lt;p&gt;距杆顶一步时，我试着抬起一只脚，没想到杆子剧烈地晃动了起来。&lt;/p&gt;
&lt;p&gt;而且我因此感到越紧张，杆子就晃动得越厉害，有了脚软的感觉。&lt;/p&gt;
&lt;p&gt;我老老实实把脚放了回去，仔细想了一下：原路返回肯定不可能，别人都过了，如果就我退缩了，这个无论如何都说不过去。&lt;/p&gt;
&lt;p&gt;那我到底是在怕什么呢？貌似杆子再怎么晃，我也掉不下去。&lt;/p&gt;
&lt;p&gt;于是心一横，不管它晃不晃，抬脚站上去就跳了，果然圆满完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果注意力一直放在困难上面，那么困难就会被一直放大。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;翻越高墙&lt;/h3&gt;
&lt;p&gt;50几个人全部翻越大概3米高的墙，猜猜要多久？&lt;/p&gt;
&lt;p&gt;1个小时？40分钟？半个小时？&lt;/p&gt;
&lt;p&gt;平均过1个人怎么也要1分钟吧。&lt;/p&gt;
&lt;p&gt;教官二话没说，给出了30分钟的时限。&lt;/p&gt;
&lt;p&gt;大伙开始动手，吭哧吭哧热火朝天。&lt;/p&gt;
&lt;p&gt;完成任务的时候，猜猜我们用了多久？&lt;/p&gt;
&lt;p&gt;15分钟。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;想拿60分，就必须把目标设定成80分。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;毕业汇演&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;在旁座的盛情邀请下，我和他一起报了名，表演一个双簧节目，用湖南话。&lt;/p&gt;
&lt;p&gt;报完名感到很有压力，也很紧张，因为我从来没演过双簧，也根本不会说湖南话。&lt;/p&gt;
&lt;p&gt;每晚回到家，我只能一遍又一遍地训练，发现心里面越来越踏实了。&lt;/p&gt;
&lt;p&gt;汇演结束的时候，有个同学很高兴地跑过来，问我是湖南哪里人。&lt;/p&gt;
&lt;p&gt;我说我不是湖南人。&lt;/p&gt;
&lt;p&gt;他很惊讶：不会吧？你说得这么像！&lt;/p&gt;
&lt;p&gt;这件事情是整个百阿让我感触最深的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;看到苦练得到回报，是一件很带劲的事情。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;总结与展望&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3&gt;背后的付出&lt;/h3&gt;
&lt;p&gt;处理各种杂七杂八事情的班委、熬夜做毕业视频的葵海、翻越高墙项目中做肉墙的汉子……&lt;/p&gt;
&lt;p&gt;大家从来不去说这些事情，只是在背后默默地付出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you really want to do something, you won't talk about it, you just do it.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;展望未来&lt;/h3&gt;
&lt;p&gt;百阿结束了，它既是一次阿里文化学习之旅，也是一次鸡血的励志之旅。&lt;/p&gt;
&lt;p&gt;百阿让我对阿里的文化有了更进一步的理解，产生了气味相投的感觉。&lt;/p&gt;
&lt;p&gt;但是这远远不够，仍然需要在今后的工作中不断地去训练、强化与总结。&lt;/p&gt;
&lt;p&gt;感谢百阿，阿里之旅才刚刚开始。&lt;/p&gt;</summary><category term="百阿"></category><category term="阿里"></category></entry><entry><title>阿里校招内推简历筛选</title><link href="http://www.lizherui.com/pages/2013/08/25/filter_resume.html" rel="alternate"></link><updated>2013-08-25T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-08-25:pages/2013/08/25/filter_resume.html</id><summary type="html">&lt;p&gt;上周在BYR论坛发了一个阿里内推的帖子，没想到短时间内就收到了成百上千封简历。&lt;/p&gt;
&lt;p&gt;我仔仔细细地看了每一封简历，附带有Github地址的我也点进去仔细看了代码。&lt;/p&gt;
&lt;p&gt;最终我留下了30%的简历，而且这30%中只有10%的本科生。&lt;/p&gt;
&lt;h2&gt;筛选标准&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;满足以下条件中的任何一个，直接通过筛选：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ACM, Topcoder, Google Code Jam、Yahoo! Hack Day等重量级竞赛的获奖经历&lt;/li&gt;
&lt;li&gt;Google, Microsoft, Yahoo!, Amazon, IBM，Baidu, Tencent等顶级公司的靠谱实习经历&lt;/li&gt;
&lt;li&gt;Github, StackOverflow、Archlinux等高水平技术社区的活跃人士，贡献过高质量的开源代码&lt;/li&gt;
&lt;li&gt;Common Lisp, Scheme, Haskell, Scala等函数式语言的钻研经历&lt;/li&gt;
&lt;li&gt;黑客行为&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;满足以下条件中的任何一个，增大通过筛选的可能性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保送硕士&lt;/li&gt;
&lt;li&gt;Top级别的专业成绩&lt;/li&gt;
&lt;li&gt;丰富的国家级重点实验室项目经历&lt;/li&gt;
&lt;li&gt;发表过高水平的学术论文&lt;/li&gt;
&lt;li&gt;Markdown/Latex生成的PDF简历&lt;/li&gt;
&lt;li&gt;高质量的技术博客&lt;/li&gt;
&lt;li&gt;技能栏中写着熟练使用Vim/Emacs，以Mac OS X/Linux为日常操作系统&lt;/li&gt;
&lt;li&gt;百度之星、腾讯之星、数学建模等同级别竞赛的获奖经历&lt;/li&gt;
&lt;li&gt;新浪、网易、搜狐、360、人人、小米、优酷等同级别公司的实习经历&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;满足以下条件中的任何一个，直接淘汰：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空空的邮件正文&lt;/li&gt;
&lt;li&gt;简历中贴着一张光膀子的照片 &lt;/li&gt;
&lt;li&gt;求职产品职位却在简历中充斥着大量技术经历&lt;/li&gt;
&lt;li&gt;有类似China Great Wall的项目经历&lt;/li&gt;
&lt;li&gt;丑陋、混乱的简历排版&lt;/li&gt;
&lt;li&gt;过于空洞或过于啰嗦的项目描述&lt;/li&gt;
&lt;li&gt;自我评价中含有愚蠢、幼稚、带有强烈感情色彩的词句&lt;/li&gt;
&lt;li&gt;发件人名字或邮件中含有火星文等非主流词句&lt;/li&gt;
&lt;li&gt;所有的编程经验只是在学校中&lt;/li&gt;
&lt;li&gt;计算机培训学校的经历&lt;/li&gt;
&lt;li&gt;技能栏中，写着精通C/C++/Java/Word/Excel&lt;/li&gt;
&lt;li&gt;技能栏中，把Visual Basic列在第一的位置&lt;/li&gt;
&lt;li&gt;简历中的缩进同时使用了空格和Tab键&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;一些感悟&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3&gt;本科生的处境&lt;/h3&gt;
&lt;p&gt;本科生的处境很艰难。&lt;/p&gt;
&lt;p&gt;我本人是本科生，按理说会对本科生心软一些，而且说实话我确实很想给这批本科生内推机会。但这批简历中95%本科生的实力显得过于单薄，根本不够看，完全无法与茫茫多的大硕抗衡。&lt;/p&gt;
&lt;p&gt;有人会说，学历不重要，硕士中也有水平菜的。&lt;/p&gt;
&lt;p&gt;没错，但是请注意，硕士中也有强悍的，而且数量不少，光这帮强悍的硕士就能抢光所有的好Offer。&lt;/p&gt;
&lt;p&gt;因此，本科生，除非你有ACM级别的奖牌或者BAT级别的靠谱实习经历并且已经做好了和茫茫多大硕血拼到底的准备，否则请乖乖去读研。&lt;/p&gt;
&lt;p&gt;你们TMD还能不能打，本科生？&lt;/p&gt;
&lt;h3&gt;内推的实质&lt;/h3&gt;
&lt;p&gt;公司推出内推策略，是为了提前把人才抢到手，而不是给非人才一次额外的尝试机会。&lt;/p&gt;
&lt;p&gt;请不要再问我内推失败会不会对正式校招造成影响。&lt;/p&gt;
&lt;h3&gt;态度与能力&lt;/h3&gt;
&lt;p&gt;一些小伙伴虽然实力不够，但附上了长长的求职信，而且写得像情书一样，感人肺腑，把自己对公司的向往之情表达得淋漓尽致。&lt;/p&gt;
&lt;p&gt;抱歉，上百行催人泪下的表达不如几行高质量的代码更有力量。&lt;/p&gt;
&lt;p&gt;这是竞争。&lt;/p&gt;
&lt;p&gt;态度不能替代能力。&lt;/p&gt;
&lt;h3&gt;Offer收割机&lt;/h3&gt;
&lt;p&gt;Offer收割机不是在校招开始后出现的，而是在校招开始之前。&lt;/p&gt;
&lt;p&gt;读着一些大牛的简历，能明显感觉到处处透露着的凶狠杀气。&lt;/p&gt;
&lt;p&gt;这些人其实已经是Offer收割机了，他们蓄势待发，静静地等待着校招的来临，以检验他们长期苦练的效果。&lt;/p&gt;
&lt;p&gt;校招来临，爆发的时候到了。&lt;/p&gt;
&lt;p&gt;很多人对此感到不解甚至是恼火：为什么offer收割机们要拿这么多offer，最后不也只能选一个吗？&lt;/p&gt;
&lt;p&gt;因为每一个offer都是他们通宵达旦苦练编程的见证。&lt;/p&gt;
&lt;p&gt;看到苦练得到回报，是一件很带劲的事情。&lt;/p&gt;
&lt;p&gt;很难描述这种感觉。&lt;/p&gt;
&lt;p&gt;就像一种瘾。&lt;/p&gt;
&lt;h3&gt;残酷的竞争&lt;/h3&gt;
&lt;p&gt;我印象最深的是去年10月百度校招的场景，在百度食堂齐刷刷地坐满了上千号人。&lt;/p&gt;
&lt;p&gt;这种规模的面试场面，我是第一次见，也是唯一的一次。&lt;/p&gt;
&lt;p&gt;各路大牛齐聚一堂，连大名鼎鼎的清华博士都笑眯眯地过来凑凑热闹。&lt;/p&gt;
&lt;p&gt;这个时候才发现自己弱爆了，一点儿也凶狠不起来了。&lt;/p&gt;
&lt;p&gt;连续3轮的高强度面试，一着不慎满盘皆输的节奏。&lt;/p&gt;
&lt;p&gt;看到大批大批优秀的人才齐刷刷地败下阵来，唉声叹气地往外走，然后就轮到自己上场了。&lt;/p&gt;
&lt;h2&gt;感谢与祝福&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;感谢投简历的小伙伴们对阿里的支持与肯定。&lt;/p&gt;
&lt;p&gt;感谢对爬取校招信息代码做出贡献的小伙伴们。&lt;/p&gt;
&lt;p&gt;祝福大家都能抢到心仪的Offer。&lt;/p&gt;</summary><category term="内推"></category><category term="简历"></category></entry><entry><title>一万小时定律</title><link href="http://www.lizherui.com/pages/2013/08/20/ten_thousand_hours.html" rel="alternate"></link><updated>2013-08-20T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-08-20:pages/2013/08/20/ten_thousand_hours.html</id><summary type="html">&lt;p&gt;可能大多数人都觉得自己已经很勤奋了。&lt;/p&gt;
&lt;p&gt;但是看了这个系列的纪录片后，我们也许会反思什么才是勤奋的真正含义。&lt;/p&gt;
&lt;p&gt;第一季一共有四部。&lt;/p&gt;
&lt;p&gt;第一部：&lt;/p&gt;
&lt;iframe height=498 width=510 src="http://player.youku.com/embed/XNTk4MjM1MDUy" frameborder=0 allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;第二部：&lt;/p&gt;
&lt;iframe height=498 width=510 src="http://player.youku.com/embed/XNTk5NTU5NzIw" frameborder=0 allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;第三部：&lt;/p&gt;
&lt;iframe height=498 width=510 src="http://player.youku.com/embed/XNjA0MjMwMDYw" frameborder=0 allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;附加篇：&lt;/p&gt;
&lt;iframe height=498 width=510 src="http://player.youku.com/embed/XNjA2NDc4OTgw" frameborder=0 allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="练习"></category><category term="一万小时"></category></entry><entry><title>对待技术的态度</title><link href="http://www.lizherui.com/pages/2013/08/18/attitude_to_tech.html" rel="alternate"></link><updated>2013-08-18T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-08-18:pages/2013/08/18/attitude_to_tech.html</id><summary type="html">&lt;p&gt;最近北邮人论坛上对IT行业技术人员的声讨愈演愈烈，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bbs.byr.cn/#!article/Job/1397821"&gt;搞lT的要有自知之明!!!!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bbs.byr.cn/#!article/Job/1398322"&gt;搞IT的要有自知之明！！！！（之二）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bbs.byr.cn/#!article/Job/1398654"&gt;搞IT就是一个大坑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回应如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bbs.byr.cn/#!article/Job/1398835"&gt;跳进IT这个大坑，一直没有自知之明（痛心疾首篇）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bbs.byr.cn/#!article/Job/1398880"&gt;IT行业不是一个坑~&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;争论非常激烈，各路大牛都在积极发表自己的看法。&lt;/p&gt;
&lt;p&gt;我认认真真看了每一条回复，仔仔细细思考了很久很久。&lt;/p&gt;
&lt;p&gt;我感觉很多人并不能很准确地理解IT行业技术人员对待技术的态度。&lt;/p&gt;
&lt;p&gt;该不该搞技术，尤其是该不该花大量的业余时间去钻研技术，真的不需要这么多乱七八糟的争论。&lt;/p&gt;
&lt;p&gt;至少对于我来说，在技术上花费如此多的时间和精力，最直接的原因就是：&lt;/p&gt;
&lt;p&gt;Just for fun.&lt;/p&gt;
&lt;p&gt;根本懒得去纠结思考学习某样技术到底有没有用、时间应该花在哪些更值得的事情上。&lt;/p&gt;
&lt;p&gt;就是为了乐趣而已。&lt;/p&gt;
&lt;p&gt;在某种程度上，这与很多人喜欢通宵打游戏、喜欢整天逛街是一回事。&lt;/p&gt;
&lt;p&gt;Have fun, and enjoy it.&lt;/p&gt;</summary><category term="技术"></category></entry><entry><title>一步一步打造Geek风格的技术博客</title><link href="http://www.lizherui.com/pages/2013/08/17/build_blog.html" rel="alternate"></link><updated>2013-08-17T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-08-17:pages/2013/08/17/build_blog.html</id><summary type="html">&lt;h2&gt;如梦初醒&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3&gt;Geek是什么&lt;/h3&gt;
&lt;p&gt;Geek更多的是一种精神，一种态度，一种对技术的理解与信念。他们无法忍受丑陋的代码，拙劣的技术。他们思路开阔，技术娴熟，他们不甘平庸，追求完美。他们不会囿于常识，他们敢于突破。在常人眼中，他们不走寻常路，享受各种非主流的技术。但在他们自己眼中，这些又是那么得自然与优美。他们用自己的行为诠释着自己对于技术的理解，用那份固执传达着自己的信念。&lt;/p&gt;
&lt;p&gt;他们掌握并热爱着技术，叛逆、执着，崇尚自由。&lt;/p&gt;
&lt;h3&gt;为什么不选择CSDN、Wordpress、Jekyll等技术&lt;/h3&gt;
&lt;p&gt;我在CSDN上发表博文被和谐了一次，就不会允许这种事发生第二次。&lt;/p&gt;
&lt;p&gt;Wordpress上手容易、功能强大、插件丰富。但是在我看来，这些优点同时也是它的缺点：太笨重、太无脑、不够酷、无用功能太多、可定制的粒度不够小。我更喜欢简洁快速粗暴的博客系统。&lt;/p&gt;
&lt;p&gt;Jekyll非常棒，可惜它基于Ruby。对于Python爱好者而言，基于Python的Pelican显然更加可口。&lt;/p&gt;
&lt;h2&gt;卧薪尝胆&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;我在搭建这个博客的过程中学到了很多很多有意思的技术。&lt;/p&gt;
&lt;p&gt;搭建环境为Mac OS X/Linux，Windows下可能会麻烦一些。&lt;/p&gt;
&lt;p&gt;搭建过程中会涉及到的技术名词如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mac OS X&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Pip&lt;/li&gt;
&lt;li&gt;Pelican&lt;/li&gt;
&lt;li&gt;Jinja2&lt;/li&gt;
&lt;li&gt;Github &lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Makefile&lt;/li&gt;
&lt;li&gt;Markdown&lt;/li&gt;
&lt;li&gt;Mou&lt;/li&gt;
&lt;li&gt;Google Analytics&lt;/li&gt;
&lt;li&gt;Google Custom Search&lt;/li&gt;
&lt;li&gt;Google Webmasters&lt;/li&gt;
&lt;li&gt;Picasa&lt;/li&gt;
&lt;li&gt;Disqus&lt;/li&gt;
&lt;li&gt;Rss&lt;/li&gt;
&lt;li&gt;Sitemap&lt;/li&gt;
&lt;li&gt;Godaddy&lt;/li&gt;
&lt;li&gt;Dnspod&lt;/li&gt;
&lt;li&gt;A记录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若对任何一个技术名词有疑问，请翻墙&lt;a href="https://www.google.com/ncr"&gt;Google&lt;/a&gt; it.&lt;/p&gt;
&lt;h2&gt;初见端倪&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;开始动手。&lt;/p&gt;
&lt;h3&gt;Github入门指南&lt;/h3&gt;
&lt;p&gt;请参考&lt;a href="http://blog.csdn.net/duxinfeng2010/article/details/8654690"&gt;http://blog.csdn.net/duxinfeng2010/article/details/8654690&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;使用Github Pages创建个人博客&lt;/h3&gt;
&lt;p&gt;Github为每一个用户分配了一个二级域名username.github.io，用户为自己的二级域名创建主页很简单，只需要在Github下创建一个名为username.github.io的版本库，并向其master分支提交网站静态页面即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登陆Github，创建一个名为username.github.io的版本库（将username替换成自己的Github账户名）。&lt;/li&gt;
&lt;li&gt;点击Setting，选择一个自己喜欢的模板，最后点击发布public按钮。&lt;/li&gt;
&lt;li&gt;耐心等待一段时间（不超过10分钟），登陆http://username.github.io，会发现自己的个人博客已经生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;安装Pelican和Markdown&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;搭建骨架&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;quickstart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据提示一步步输入相应的配置项，不知道如何设置的接受默认即可，后续可以通过编辑pelicanconf.py文件更改配置)&lt;/p&gt;
&lt;p&gt;以下是生成的目录结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;              &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;存放输入的源文件&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;存放手工创建的静态页面&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;               &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;生成的输出文件&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;develop_server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;方便开启测试服务器&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;Makefile&lt;/span&gt;             &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;方便管理博客的&lt;/span&gt;&lt;span class="n"&gt;Makefile&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;pelicanconf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;       &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;主配置文件&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;publishconf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;       &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;主发布文件，可删除&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进入output把自己刚刚建好的username.github.io版本库clone下来：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;开始写博文&lt;/h3&gt;
&lt;p&gt;在content目录下用Markdown语法来写一篇文章，最好选择专业的Markdown编辑器，在Mac OS X下推荐使用Mou，在Linux/Windows下请Google。&lt;/p&gt;
&lt;p&gt;用Markdown写博文截图如下：
&lt;img alt="1" src="https://lh5.googleusercontent.com/-edzDa6ch3Jk/Ug5oATNTjsI/AAAAAAAAAKs/WIqU7KziyOA/w958-h599-no/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-17+%25E4%25B8%258A%25E5%258D%25881.57.09.png" /&gt;&lt;/p&gt;
&lt;p&gt;左半边是正在用markdown写的博文，右边是即时预览效果。&lt;/p&gt;
&lt;p&gt;写完后，执行以下命令，即可在本机&lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt;看到效果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;若要一键上传到Github，需要修改Makefile两处地方：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;publish:&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PELICAN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INPUTDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONFFILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PELICANOPTS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nl"&gt;github:&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;OUTPUTDIR&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;comments&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以后写完文章执行make github就可以一键部署了。&lt;/p&gt;
&lt;h2&gt;如虎添翼&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;我们已经能成功地用markdown写出博文并部署到github了，但这远远不够。&lt;/p&gt;
&lt;h3&gt;管理图片&lt;/h3&gt;
&lt;p&gt;我觉得使用云相册比本地图片要方便的多，我使用&lt;a href="https://picasaweb.google.com?noredirect=1"&gt;Picasa&lt;/a&gt;来维护blog的所有图片。&lt;/p&gt;
&lt;h3&gt;挑选主题&lt;/h3&gt;
&lt;p&gt;安装主题，比如bootstrap2：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/getpelican/pelican-themes.git&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;bootstrap2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;选择主题，在pelicanconf.py中添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bootstrap2&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装第三方评论系统&lt;/h3&gt;
&lt;p&gt;在&lt;a href="https://disqus.com/admin/signup"&gt;Disqus&lt;/a&gt;上申请一个站点，记牢Shortname。
在pelicanconf.py添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Shortname&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;添加Google Analytics&lt;/h3&gt;
&lt;p&gt;去&lt;a href="http://www.google.com/analytics"&gt;Google Analytics&lt;/a&gt;申请账号，记下跟踪ID。
在pelicanconf.py添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;GOOGLE_ANALYTICS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;跟踪&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Google Analytics极其强悍，截图说明一切：
&lt;img alt="2" src="https://lh6.googleusercontent.com/-9vXmIT6vXDo/Ug5wTSu4wMI/AAAAAAAAALM/5-VSrnXNGUU/w958-h599-no/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-17+%25E4%25B8%258A%25E5%258D%25882.31.26.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://lh6.googleusercontent.com/-a4ZAnTD7F0I/Ug5wTX0w9nI/AAAAAAAAALI/x9J0atK3lpU/w958-h599-no/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-17+%25E4%25B8%258A%25E5%258D%25882.31.54.png" /&gt;&lt;/p&gt;
&lt;h3&gt;使用Google Webmasters&lt;/h3&gt;
&lt;p&gt;在&lt;a href="http://www.google.com/webmasters"&gt;Google Webmasters&lt;/a&gt;上注册即可。&lt;/p&gt;
&lt;p&gt;这个就是Google站长工具，使用它的目的是为了让博客被Google更好的收录，比如手动让Googlebot抓取、提交Robots、更新Sitemap等等，各方面完爆百度站长工具。&lt;/p&gt;
&lt;p&gt;截图如下：
&lt;img alt="3" src="https://lh3.googleusercontent.com/-tYrEbXyx_5o/UhGS1C_lcYI/AAAAAAAAALk/H7X7MBjNkVY/w958-h599-no/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-19+%25E4%25B8%258A%25E5%258D%258811.36.32.png" /&gt;&lt;/p&gt;
&lt;h3&gt;添加插件&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/getpelican/pelican-plugins.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比如我要使用sitemap，在pelicanconf.py里配置如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PLUGIN_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pelican-plugins&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sitemap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;SITEMAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;priorities&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;articles&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;indexes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;pages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;changefreqs&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;articles&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;monthly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;indexes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;daily&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;pages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;monthly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用Google站内搜索&lt;/h3&gt;
&lt;p&gt;请参考&lt;a href="http://www.codenut.net/post/2013-06-30-cse"&gt;http://www.codenut.net/post/2013-06-30-cse&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;申请独立域名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;a href="https://www.godaddy.com"&gt;Godaddy&lt;/a&gt;上用支付宝花购买为期一年的顶级域名，并去修改Nameservers为这两个地址：f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。&lt;/li&gt;
&lt;li&gt;在&lt;a href="https://www.dnspod.cn"&gt;Dnspod&lt;/a&gt;上添加新域名，并申请一条A记录指向Github Pages的ip:207.97.227.245；&lt;/li&gt;
&lt;li&gt;在Pelican主目录新建CNAME文件，添上刚刚申请的域名，如我的www.lizherui.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;登峰造极&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;最后，如果感觉还不够味儿，可以参考Pelican官方文档和这个博客的完整源码。&lt;/p&gt;
&lt;p&gt;Pelican : &lt;a href="http://docs.getpelican.com/en/3.2"&gt;http://docs.getpelican.com/en/3.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Code : &lt;a href="https://github.com/lizherui/lizherui.github.io"&gt;https://github.com/lizherui/lizherui.github.io&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;</summary><category term="pelican"></category><category term="blog"></category><category term="python"></category></entry><entry><title>为什么我一直强烈推荐程序员使用Mac OS X</title><link href="http://www.lizherui.com/pages/2013/08/11/use_mac_os_x.html" rel="alternate"></link><updated>2013-08-11T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-08-11:pages/2013/08/11/use_mac_os_x.html</id><summary type="html">&lt;p&gt;像绝大多数国内程序员一样，我在相当长的时间里对Mac OS X一无所知，最开始使用Windows进行开发，然后转到Linux。&lt;/p&gt;
&lt;p&gt;去年11月我终于攒够钱了，决定试着从Linux转到Mac OS X，于是入手Macbook Pro，从此踏上了Mac OS X的道路，没想到一去不复返。&lt;/p&gt;
&lt;p&gt;这一年来使用Mac OS X的经历，不仅极大地开拓了我的视野，而且在很大程度上改变了我对待软件开发的态度。当然了，最重要的是，它使我的开发效率有了质的提升。&lt;/p&gt;
&lt;h2&gt;Macintosh在国内的现状&lt;/h2&gt;
&lt;p&gt;Macintosh，即搭载着Mac OS X操作系统的苹果电脑，在国内的市场份额一直少得可怜，甚至在程序员这样的团体中亦是如此。&lt;/p&gt;
&lt;p&gt;是因为Macintosh太贵了？还是因为Mac OS X不兼容Windows的一些软件？虽然这两条理由确实会打消广大普通用户购买Macintosh的念头，但是对于国内程序员来讲，这俩显然都不是问题。&lt;/p&gt;
&lt;p&gt;那到底是什么原因阻碍了绝大多数国内程序员使用Mac OS X呢？&lt;/p&gt;
&lt;p&gt;我仔细观察过这个事情很长时间，后来越来越明晰地发现，最根本的原因是绝大多数国内程序员完全都不知道Mac OS X是什么，更别提使用Mac OS X能给自己带来哪些好处了。&lt;/p&gt;
&lt;h2&gt;Mac OS X首先是Unix&lt;/h2&gt;
&lt;p&gt;没错，Mac OS X是Unix，这是最重要的一点，而很多很多国内程序员都不知道。&lt;/p&gt;
&lt;p&gt;这是Wikipedia对Mac OS X的部分描述：Mac OS X于1998年首次推出，并从2002年起随Macintosh发售。它是一套Unix基础的操作系统，包含两个主要的部份：核心名为Darwin，是以FreeBSD源代码和Mach微核心为基础，由苹果公司和独立开发者社区协力开发，以及一个由苹果计算机开发，名为Aqua之专有版权的图形界面。&lt;/p&gt;
&lt;p&gt;在命令行执行uname -a可以看到:
&lt;img alt="1" src="https://lh6.googleusercontent.com/v4Y0Fq4yLwoyn9aNLPllnXuooi_0pxbf4v3QUhyDQGk=w958-h40-no" /&gt;&lt;/p&gt;
&lt;p&gt;Mac OS X甚至比Linux具有更纯正的Unix血统，它是真正的Unix，符合标准，有授权，可以合法地用Unix商标。&lt;/p&gt;
&lt;h2&gt;Unix环境意味着什么&lt;/h2&gt;
&lt;p&gt;对于非c#/.net系程序员来讲，一套Unix环境绝对是必备的，尤其是C、C++、PHP、Python、Ruby程序员。Java程序员倒不是那么依赖Unix环境，但使用Unix环境只会如虎添翼。&lt;/p&gt;
&lt;p&gt;我回想起使用Windows开发C/C++/Python的那段日子，最痛苦的事情倒不是有些软件只支持Unix环境，而是当开发过程中遇到一些Windows环境下特有的奇奇怪怪的问题时，Google都搜索不到相应的解决方案，因为活跃的开发者大多使用Unix环境。&lt;/p&gt;
&lt;p&gt;这样的事情发生多了，就会让开发人员感到越来越沮丧，进而绝望。&lt;/p&gt;
&lt;p&gt;于是像大多数程序员一样，我开始学习使用Linux。&lt;/p&gt;
&lt;h2&gt;Linux操作系统的问题&lt;/h2&gt;
&lt;p&gt;就开发程序而言，Linux没有什么问题。&lt;/p&gt;
&lt;p&gt;Linux最大的问题之一在于桌面软件实在太少，连基本的搜狗输入法、QQ都没有，更别提其它的了。&lt;/p&gt;
&lt;p&gt;这就导致我们必须要经常在Linux和Windows之间切换：在Linux下开发，在Windows下做开发以外的事情。&lt;/p&gt;
&lt;p&gt;这样的事情做久了，就会越来越厌烦。&lt;/p&gt;
&lt;p&gt;Linux还有一个大问题就是图形界面太渣，而且很不稳定，实在是无力继续吐槽。&lt;/p&gt;
&lt;p&gt;于是，一个自然而然的需求便会越来越强烈：有没有既含Windows这样靠谱的图形系统以及广大的常用软件，又有高效的Unix命令行环境的一站式解决方案呢？&lt;/p&gt;
&lt;p&gt;答案就是Mac OS X。&lt;/p&gt;
&lt;h2&gt;Mac OS X的其它优势&lt;/h2&gt;
&lt;p&gt;除了上述所说的Mac OS X既含有程序员必备的Unix命令行环境，又具备高端大气上档次的图形界面这一招牌优势外，Mac OS X中还有很多强悍的利器。&lt;/p&gt;
&lt;h3&gt;眼花缭乱的手势&lt;/h3&gt;
&lt;p&gt;我们看到使用macbook的人很少使用鼠标，不是因为他们忘了带，而是根本不需要鼠标，因为触摸板+手势完爆鼠标。&lt;/p&gt;
&lt;p&gt;Macbook的触摸板无疑是世界上最出色的：轻拍点按，双指右键，双指上下滚动，三指查找，三指拖移，四指左右切换全屏程序，四指上推显示Mission Control，四指下推显示Expose，四指合拢显示Launchpad，四指张开显示桌面。。。。。。&lt;/p&gt;
&lt;p&gt;而且由于触摸板离键盘很近，我们能很方便地以手掌为轴心在触摸板和键盘之间旋转切换，而不需要像使用鼠标+键盘那样很麻烦地把整只手移来移去。这一点很重要，无时无刻都在极大地提高开发效率。&lt;/p&gt;
&lt;h3&gt;设计优美的软件&lt;/h3&gt;
&lt;p&gt;Mac OS X上的软件外貌优美，风格统一，没有乱七八糟的广告和病毒，也不需要360这样强奸用户的软件。一切都是绿色的、纯天然的。&lt;/p&gt;
&lt;h3&gt;独一无二的字体渲染&lt;/h3&gt;
&lt;p&gt;Mac OS X的字体渲染效果是最好的，完爆Windows/Linux。在Windows上有一个模仿Mac OS X字体渲染效果的软件叫Mactype，但仍然不能与Mac OS X的字体渲染效果相提并论。大名鼎鼎的Monaco字体有着程序员专用字体的美称，同样来自Mac OS X。&lt;/p&gt;
&lt;p&gt;这是命令行下的字体效果：
&lt;img alt="2" src="https://lh5.googleusercontent.com/-K5cnpKlXKwc/UgfGws5tvzI/AAAAAAAAAJ4/cXOTHfdjWRQ/w728-h350-no/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-12+%25E4%25B8%258A%25E5%258D%25881.15.00.png" /&gt;&lt;/p&gt;
&lt;p&gt;这是Vim中的字体效果:
&lt;img alt="3" src="https://lh5.googleusercontent.com/-CrhmcI9FC4Q/UgfG-YrNY1I/AAAAAAAAAKA/1ytp9t3SWto/w724-h612-no/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-08-12+%25E4%25B8%258A%25E5%258D%25881.16.22.png" /&gt;&lt;/p&gt;
&lt;h3&gt;行云流水的快捷键&lt;/h3&gt;
&lt;p&gt;Mac OS X上的快捷键随处可见，能随心所欲地定制，并且大多以Command为组合快捷键中的主键，用大拇指按起来极其顺手，让人渐渐忘却了Windows/Linux上用小拇指费劲地按ctrl/alt的痛苦日子。&lt;/p&gt;
&lt;h3&gt;强悍易用的软件包管理器&lt;/h3&gt;
&lt;p&gt;Homebrew，Mac OS X上强悍的软件包管理器，使用Ruby开发，托管在github上：&lt;a href="https://github.com/mxcl/homebrew"&gt;https://github.com/mxcl/homebrew&lt;/a&gt;。我用过Ubuntu上的apt，也用过Fedora上的yum，但它俩实在无法跟Homebrew相提并论。&lt;/p&gt;
&lt;h2&gt;结束语&lt;/h2&gt;
&lt;p&gt;无它，唯Mac OS X。&lt;/p&gt;</summary><category term="mac os x"></category><category term="macintoch"></category></entry><entry><title>编写可读代码的艺术</title><link href="http://www.lizherui.com/pages/2013/08/08/clean_code.html" rel="alternate"></link><updated>2013-08-08T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-08-08:pages/2013/08/08/clean_code.html</id><summary type="html">&lt;p&gt;我最早开始重视代码的可读性还是大三在搜狐做Python研发实习生的时候。那会儿我特别嫩，写代码还是学校大作业风格，天天被leader各种批评。现在回忆起来，虽然在搜狐呆的时间特别短，但那段经历能引起我对代码可读性的重视，也算是重量级的收获了。&lt;/p&gt;
&lt;p&gt;今天一口气读完了《编写可读性代码的艺术》，感觉非常爽。我一直认为代码的可读性绝对是第一重要的，正如《黑客与画家》所言："代码写出来是给人看的，附带着能在机器上运行"。&lt;/p&gt;
&lt;p&gt;顺手记录了几个重要的原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;可读性基本定理：代码的写法应当使别人理解它所需的时间最小化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把信息装进名字里。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;清晰和精确比装可爱好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在小的作用域内可以使用短的名字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不会误解的名字是最好的名字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用一致的布局；让相似的代码看上去相似；把相关的代码行分组，形成代码块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一致的风格比正确的风格更重要。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注释的目的是尽量帮助读者了解得和作者一样多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要为那些从代码本身就能快速推断的事实写注释。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注释应该有很高的信息/空间率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把条件、循环以及其他对控制流的改变做得越“自然”越好，使读者不用停下了重读你的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;默认情况下都用if/else，三目运算符?:只在最简单的情况下使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当你对代码改动时，从全新的角度审视它，把它作为一个整体来看待。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把超长表达式拆分出易于理解的小块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小心“智能”的小代码段，它们往往在以后会让别人读起来很困惑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;让变量对尽量少的代码行可见。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作一个变量的地方越多，就越难确定它的当前值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应当把代码组织得一次只做一件事情。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最好读的代码就是没有代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="可读性"></category><category term="读书笔记"></category></entry><entry><title>如何成为一名黑客(转)</title><link href="http://www.lizherui.com/pages/2013/08/06/become_a_hack.html" rel="alternate"></link><updated>2013-08-06T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-08-06:pages/2013/08/06/become_a_hack.html</id><summary type="html">&lt;p&gt;这是一份大名鼎鼎的黑客手册，来自Eric S. Raymond，我忍不住转存下来。&lt;/p&gt;
&lt;h2&gt;什么是黑客&lt;/h2&gt;
&lt;p&gt;Jargon File 包含了一大堆关于“hacker”这个词的定义，大部分与技术高超和热衷解决问题 及超越极限有关。但如果你只想知道如何 成为 一名黑客， 那么只有两件事情确实相关。&lt;/p&gt;
&lt;p&gt;这可以追溯到几十年前第一台分时小型电脑诞生, ARPAnet 实验也刚展开的 年代，那时有一个由程序设计专家和网络名人所组成的, 具有分享特点的文化社群。 这种文化的成员创造了 “hacker” 这个名词。黑客们建立了 Internet。 黑客们发明出了现在使用的 UNIX 操作系统。黑客们使 Usenet 运作起来， 黑客们让 WWW 运转起来。如果你是这个文化的一部分，如果你对这种文化有所贡献，而且 这个社群的其它成员也认识你并称你为 hacker, 那么你就是一位黑客。&lt;/p&gt;
&lt;p&gt;黑客精神并不仅仅局限在软件的黑客文化中。 有人用黑客态度对待其它事情，如电子学和音乐—— 事实上，你可以在任何最高级别的科学和艺术活动中发现它。 精于软件的黑客赞赏这些在其他领域的同类并把他们也称作黑客—— 有人宣称黑客天性是绝对独立于他们工作的特定领域的。 但在这份文档中， 我们将注意力集中在软件黑客的技术和态度， 以及发明了“黑客”一词的以共享为特征的文化传统之上。&lt;/p&gt;
&lt;p&gt;有一群人大声嚷嚷着自己是黑客，但他们不是。 他们（主要是正值青春的少年）是一些蓄意破坏计算机和电话系统的人。 真正的黑客把这些人叫做“骇客”(cracker)，并不屑与之为伍。 多数真正的黑客认为骇客们又懒又不负责任，还没什么大本事。 专门以破坏别人安全为目的的行为并不能使你成为一名黑客， 正如 用铁丝偷开走汽车并不能使你成为一个汽车工程师。 不幸的是，很多记者和作家往往错把“骇客”当成黑客； 这种做法一直使真正的黑客感到恼火。&lt;/p&gt;
&lt;p&gt;根本的区别是：黑客搞建设，骇客搞破坏。&lt;/p&gt;
&lt;p&gt;如果你想成为一名黑客，请接着读下去。如果你想做一个骇客，去读 alt.2600 新闻组，并在意识到你并不像自己想象的那么聪明后去坐五到十次监狱。 关于骇客，我只想说这么多。&lt;/p&gt;
&lt;h2&gt;黑客应有的态度&lt;/h2&gt;
&lt;p&gt;黑客们解决问题，建设事物，同时他们崇尚自由和无私的双向帮助。 要被他人承认是一名黑客，你的行为得体现出你好像具备了这种态度一般。 而要想做得好象你具备这种态度一般，你就得切切实实坚持它。&lt;/p&gt;
&lt;p&gt;但是如果你认为培养黑客态度只是一条在黑客文化圈中得到承认的路子， 那就大错特错了。成为具备这些特质的这种人对 你自己非常重要——有助于你学习，及给你提供源源不断的动力。 同所有创造性的艺术一样，成为大师
的最有效方法就是模仿大师的精神—— 不仅从智力上，也要从感情上进行模仿。&lt;/p&gt;
&lt;p&gt;或许, 下面这首现代的禅诗很好的阐述了这个意思：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;follow&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;（沿着这样一条道路：）&lt;/span&gt;

&lt;span class="n"&gt;look&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;（寻找大师，）&lt;/span&gt;

&lt;span class="n"&gt;follow&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;（跟随大师，）&lt;/span&gt;

&lt;span class="n"&gt;walk&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;（与大师通行，）&lt;/span&gt;

&lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;（洞察大师，）&lt;/span&gt;

&lt;span class="n"&gt;become&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;（成为大师。）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;嗯，如果你想成为一名黑客，反复读下面的事情直至你相信它们。&lt;/p&gt;
&lt;h3&gt;1，世界充满了待解决的迷人问题&lt;/h3&gt;
&lt;p&gt;做一名黑客会有很多乐趣，但却是要费很多气力方能得到的乐趣。 这些努力需要动力。成功的运动员从锻炼身体、超越自我极限的愉悦中得到动力。 同样，做黑客，你得能从解决问题，磨练技术及锻炼智力中得到基本的乐趣。&lt;/p&gt;
&lt;p&gt;如果你还不是天生的这类人又想做黑客，你就要设法成为这样的人。 否则你会发现，你的黑客热情会被其他分心的事物吞噬掉——如金钱、性和社会上的虚名。&lt;/p&gt;
&lt;p&gt;同样你必须对你自己的学习能力建立信心——相信尽管当你对某问题近乎一无所知， 但只要你一点一点地试验、学习，最终会掌握并解决它：&lt;/p&gt;
&lt;h3&gt;2，一个问题不应该被解决两次。&lt;/h3&gt;
&lt;p&gt;聪明的脑袋是宝贵的有限的资源。当世界还充满非常多有待解决的有趣的新问题时， 它们不应该被浪费在重新发明轮子这类事情上。&lt;/p&gt;
&lt;p&gt;作为一名黑客，你必须相信其他黑客的思考时间是宝贵的——因此共享信息， 解决问题并发布结果给其他黑客几乎是一种道义，这样其他人就可以去解决 新问题而不是不断地忙于对付旧问题。&lt;/p&gt;
&lt;p&gt;(你不必认为一定要把你 所有的发明创造公布出去， 但这样做的黑客是赢得大家极度尊敬的人。卖些钱来养家糊口，租房买计算机 甚至发大财和黑客价值观也是相容的，只要你别忘记你还是个黑客。)&lt;/p&gt;
&lt;h3&gt;3，无聊和乏味的工作是罪恶。&lt;/h3&gt;
&lt;p&gt;黑客（泛指具有创造力的人们）应该从来不会被愚蠢的重复性劳动所困扰， 因为当这种事情发生时就意味着他们没有在做只有他们才能做的事情—— 解决新问题。这样的浪费伤害每一个人。因此，无聊和乏味的工作不仅仅是 令人不舒服而已，而且是罪恶。&lt;/p&gt;
&lt;p&gt;作为一个黑客，你必须坚信这点并尽可能多地将乏味的工作自动化， 不仅为你自己，也为了其他人（尤其是其他黑客们）。&lt;/p&gt;
&lt;p&gt;(对此有一个明显的例外。黑客有时也做一些在他人看来是重复性或枯燥的工作 以进行“脑力休息”，或是为了获得某种技能，或是获得一些除此以外无法获得的 特别经验。但这是自愿的——有脑子的人不应该被迫做无聊的活儿。）&lt;/p&gt;
&lt;h3&gt;4，自由万岁。&lt;/h3&gt;
&lt;p&gt;黑客们是天生的反独裁主义者。 任何能向你发命令的人能够迫使你停止解决令你着迷的问题， 同时，按照独裁者的一般思路，他通常会给出一些极端愚昧的理由。 因此，不论何处，任何独裁主义的作法，只要它压迫你和其他黑客，你就要和它斗到底。&lt;/p&gt;
&lt;p&gt;(这并非向所有权威挑战。儿童需要监护，罪犯要被看管起来。 如果服从命令得到某种东西比起用其他方式得到它更节约时间，黑客可以同意 接受某种形式的权威。但这是一个有限度的，有意的交易； 那种权威想要的个人服从不是你应该同意给予的。)&lt;/p&gt;
&lt;p&gt;权威喜欢审查和保密。他们不信任自愿的合作和信息的共享—— 他们只喜欢由他们控制的所谓“合作”。因此，作为一个黑客， 你得对审查、保密，以及使用武力或欺骗去压迫有行为能力的人们的做法有一种本能的敌意。 同时你要有为此信念斗争的意愿。&lt;/p&gt;
&lt;h3&gt;5，态度不能替代能力。&lt;/h3&gt;
&lt;p&gt;作为一名黑客，你必须培养起这些态度。 但只具备这些态度并不能使你成为一名黑客，也不能使你成为一个运动健将和摇滚明星。 成为一名黑客需要智力，实践，奉献精神和辛苦工作。&lt;/p&gt;
&lt;p&gt;因此，你必须学会怀疑，并尊重各种各样的能力。 黑客们不会为那些装模做样的人浪费时间，但他们却非常尊重能力—— 尤其是从事黑客工作的能力，不过任何能力总归是好的。 具备很少人能具备的那些方面的能力尤其好，其中具备 涉及脑力、技巧和专注方面能力的当然最好。&lt;/p&gt;
&lt;p&gt;尊敬能力，你就会享受到提高自己能力的乐趣—— 辛苦的工作和奉献会变成一种高度娱乐而非苦差事。 要想成为一名黑客，这一点非常重要。&lt;/p&gt;
&lt;h2&gt;黑客的基本技能&lt;/h2&gt;
&lt;p&gt;黑客态度重要，但技术更加重要。 态度无法替代技术，在你被别的黑客称为黑客之前，有一些基本的技术你必须掌握。&lt;/p&gt;
&lt;p&gt;这些基本技术随着新技术的出现和老技术的过时也随时间在缓慢改变。 例如，过去内容包括使用机器语言编程，而直到最近才包括了HTML。 总的来说现在主要包括以下技术：&lt;/p&gt;
&lt;h3&gt;1，学习如何编程。&lt;/h3&gt;
&lt;p&gt;这当然是最基本的黑客技能。如果你还不会任何编程语言，我建议你从Python开始。 它设计清晰，文档齐全，合适初学者入门。 它是一门很好的入门语言，并且不仅仅只是个玩具； 它非常强大、灵活，也适合做大型项目。 &lt;/p&gt;
&lt;p&gt;我有一篇 Python评价详细说明这点。好的 教程 可以在Python网站 得到。 （译者：比较好的中文Python站点可能是http://pythonrecord.51.net。）&lt;/p&gt;
&lt;p&gt;Java也是好的入门语言。它比Python难得多，但是生成的代码速度也快得多。 它同时也是一种优秀的计算机语言，不止是用来入门。&lt;/p&gt;
&lt;p&gt;但是注意，如果你只会一两门语言，你将不会达到黑客所要求的技术水平， 甚至也不能达到一个程序员的水平——你需要学会如何以抽象的方式思考编程问题， 独立于任何语言。要做一名真正的黑客，你需要学会在几天内通过一些手册， 结合你现在所知，迅速掌握一门新语言。这意味着你应该学会几种截然不同的语言。&lt;/p&gt;
&lt;p&gt;如果要做一些重要的编程工作，你将不得不学习C语言，Unix的核心语言。 C++与C非常其他类似；如果你了解其中一种，学习另一种应该不难。 但这两种都不适合编程入门者学习。而且事实上，你越避免用C编程，你的工作效率会越高。&lt;/p&gt;
&lt;p&gt;C非常有效率，节约你的机器资源。不幸的是，C的高效是通过你手动做很多底层的管理 （如内存）来达到的。底层代码都是复杂极易出现bug的，会使你花极多的时间调试。 如今的机器速度如此之快，这通常是得不偿失——比较明智的做法是使用一种运行较慢、较低 效率，但大幅节省你的时间的语言。因此，选择Python。&lt;/p&gt;
&lt;p&gt;其他对黑客而言比较重要的语言包括 Perl 和 LISP 。 Perl实用，值得一学；它被广泛用于动态网页和系统管理， 因此即便你从不用Perl写程序，至少也应该学会看。许多人使用Perl的理由和 我建议你使用Python的理由一样，都是为了避免用C完成那些不需要C高效率的工作。 你会需要理解那些工作的代码的。&lt;/p&gt;
&lt;p&gt;LISP值得学习的理由不同——最终掌握了它时你会得到丰富的启迪和经验。 这些经验会使你在以后的日子里成为一个更好的程序员，即使你实际上很少使用LISP本身。&lt;/p&gt;
&lt;p&gt;当然，实际上你最好五种都会（Python，Java，C/C++，Perl和LISP）。 除了是最重要的黑客语言外，它们还代表了截然不同的编程思路和方法，每种都会让你受益非浅。&lt;/p&gt;
&lt;p&gt;这里我无法给你完完全全的指导教会你如何编程——这是个复杂的技能。 但我可以告诉你，书本和上课也不能做到（最好的黑客中，有许多，也许 几乎都是自学成材的）。 你可以从书本上学到语言的特点——只是一些皮毛， 但
要使书面知识成为自身技能只能通过实践和虚心向他人学习。 因此要作到 （一）读代码及（二）写代码。&lt;/p&gt;
&lt;p&gt;学习如何编程就象学习用优美的自然语言写作一样。 最好的做法是读一些大师的名著，试着自己写点东西，再读
些，再写点，再读些，再写点…… 如此往复，直到你的文章达到你体会到的范文的简洁和力量。&lt;/p&gt;
&lt;p&gt;过去找到适合阅读的好的代码是困难的，因为几乎没有大型程序的源代码能让新手练手。 这种状况已经戏剧性地发生变化；开放源代码软件，编程工具和操作系统（全都由黑客写成）现在已经 随处可见。让我们在下一个话题中继续讨论……&lt;/p&gt;
&lt;h3&gt;2，得到一个开放源代码的Unix 并学会使用、运行它。&lt;/h3&gt;
&lt;p&gt;我假设你已经拥有或者能使用一台个人电脑（今天的孩子们真幸福 :-) ）。新手们能够朝学习黑客技能迈出的最基本的一步就是得到 一份Linux或BSD-Unix的一种，安装在个人电脑上，并运行它。&lt;/p&gt;
&lt;p&gt;没错，这世界上除了Unix还有其他操作系统。 但它们都是以二进制形式发布的——你无法读到它的源代码，也不可
能修改它。 尝试在运行DOS或Windows或MacOS的机器上学习黑客技术，就象是带着脚镣学跳舞。&lt;/p&gt;
&lt;p&gt;除此之外，Unix还是Internet的操作系统。 你可以学会上网却不知道Unix，但你不了解Unix就无法成为一名Internet黑客。 因此，今天的黑客文化在很大程度上是以Unix为中心的。（这点并不总是真的， 一些很早的黑客对此一直很不高兴，但Unix和Internet之间的联系已是如此之强， 甚至连Microsoft也无可奈何。）&lt;/p&gt;
&lt;p&gt;所以, 安装一套UNIX——我个人喜爱LINUX但还有其他种类的 （是的，你可以同时安装Linux及DOS/Windows在同一电脑上)。 学习它，使用它，配置它。用它在Internet上冲浪。阅读它的源代码。修改它的源代码。 你会得到比在Microsoft操作系统上更好的编程工具（包括C，LISP，Python及Perl）。 你会觉得乐趣无穷，学到在你成为大师之前意识不到的更多的知识。&lt;/p&gt;
&lt;p&gt;想知道更多关于学习Unix的信息，访问 The Loginataka 。&lt;/p&gt;
&lt;p&gt;想知道如何得到一份Linux，访问 我在哪里可以获得Linux 。 （译者：对于中文读者来讲，最简单的方式未过
于前往附近的D版/正版光盘店。）&lt;/p&gt;
&lt;p&gt;你可以在 www.bsd.org 找到BSD Unix的求助及其他资源。&lt;/p&gt;
&lt;p&gt;我有写一篇关于 Unix和Internet基础 的入门文章。&lt;/p&gt;
&lt;p&gt;（注：如果你是一个新手，我不推荐自己独立安装Linux或者BSD。 安装Linux的话，寻求本地Linux用户组的帮助；或联系 Open Projects Network 。 LISC维护着一些 IRC频道 ， 在那里你可以获得帮助。）&lt;/p&gt;
&lt;h3&gt;3，学会如何使用WWW和写HTML&lt;/h3&gt;
&lt;p&gt;黑客文化建造的大多东西都在你看不见的地方发挥着作用，帮助工厂、办公室和大学正常运转， 表面上很难看到它对非黑客的普通人的生活的影响。Web是一个大大的例外。 即便政客也同意，这个巨大耀眼的黑客玩具正在改变整个世界。 单是这个原因（还有许多其它的），你就需要学习掌握Web。&lt;/p&gt;
&lt;p&gt;这并不是仅仅意味着如何使用浏览器（谁都会），而是要学会如何写HTML， Web的标记语言。如果你不会编程，写HTML会教你一些有助于学习的思考习惯。 因此，先完成一个主页。（网上有很多好的教程； 这是一个 。)&lt;/p&gt;
&lt;p&gt;但仅仅拥有一个主页不能使你成为一名黑客。 Web里充满了各种网页。大多数是毫无意义的，零信息量垃圾——界面时髦的垃圾， 注意，垃圾的水准都类似（更多信息访问 The HTML Hell Page ）。&lt;/p&gt;
&lt;p&gt;要想有价值，你的网页必须有内容—— 它必须有趣或对其它黑客有帮助。这是下一个话题所涉及的……&lt;/p&gt;
&lt;h3&gt;4，如果你不懂实用性的英语，学习吧&lt;/h3&gt;
&lt;p&gt;作为一个美国人和一个以英语为母语的人，我以前很不情愿提到这点，免得成为 一种文化上的帝国主义。但相当多以其他语言为母语的人一直劝我指出这一点，那就是 英语是黑客文化和Internet的工作语言，你需要懂得以
便在黑客社区顺利工作。&lt;/p&gt;
&lt;p&gt;这一点千真万确。大概1991年的时候我就了解到许多黑客在技术讨论中使用英语，甚至当他们的母语都 相同，英语对他们而言只是第二语言的时候；据我知道的报导，当前英语有着比其他语言丰富得多的技术词汇， 因此是一个对于工作来说相当好的工具。 基于类似的原因，英文技术书籍的翻译通常不令人满意（如果有翻译的话）。&lt;/p&gt;
&lt;p&gt;Linus Torvalds，一个芬兰人，用英语注释他的代码（很明显这对他来说不是凑巧）。 他流利的英语成为他能够管理全球范围的Linux开发人员社区的重要因素。 这是一个值得学习的例子。&lt;/p&gt;
&lt;h2&gt;黑客文化中的地位&lt;/h2&gt;
&lt;p&gt;像大部分不涉及金钱的文化一样，黑客王国靠声誉运转。 你设法解决有趣的问题，但它们到底多有趣，你的解法有多好， 是要由那些和你具有同样技术水平的人或比你更厉害的人去评判的。&lt;/p&gt;
&lt;p&gt;相应地，当你在玩黑客游戏时，你得认识到你的分数主要靠其他黑客对你的技术的评价给出 （这就是为什么只有在其它黑客称你为黑客时，你才算得上是一名黑客）。 这个事实常会被黑客是一项孤独的工作这一印象所减弱；也会被另一个黑客文化的禁忌所减弱 （现在逐渐减弱但仍强大）：拒绝承认自我或外部评估与一个人的动力有关系。&lt;/p&gt;
&lt;p&gt;特别地，黑客王国被人类学家们称为一种奉献文化。 在这里你不是凭借你对别人的统治来建立地位和名望，也不是靠美貌，或拥有其他人想要的东西， 而是靠你的奉献。尤其是奉献你的时间，你的创造和你的技术成果。
要获得其他黑客的尊敬，基本上有五种事情你可以干：&lt;/p&gt;
&lt;h3&gt;1，写开放源代码软件&lt;/h3&gt;
&lt;p&gt;第一个（也是最集中的和传统的）是写些被其他黑客认为有趣或有用的程序， 并把程序源代码提供给整个黑客文化使用。&lt;/p&gt;
&lt;p&gt;（过去我们称之为“free software （自由软件）”， 但这却使很多不知 free 的精确含义的人感到困惑。 现在我们很多人，根据搜索引擎网页内容分析至少有2：1的比率，使用“ open-source ”software（开放源代码软件）这个词）。&lt;/p&gt;
&lt;p&gt;黑客王国里最受尊敬的偶像是那些写了大型的、好用的、具有广泛用途的软件， 并把它们公布出去，使得每人都
在使用他软件的人。&lt;/p&gt;
&lt;h3&gt;2，帮助测试并调试开放源代码软件&lt;/h3&gt;
&lt;p&gt;黑客也尊敬那些使用、测试开放源代码软件的人。 在这个并非完美的世界上，我们不可避免地要花大多数的开发时间在调试阶段。 这就是为什么任何有头脑的开放源代码的作者都会告诉你好的beta测试员 （知道如何清楚描述出错症状，很好地定位错误，能忍受快速发布中的bug， 并且愿意使用一些简单的诊断工具）象红宝石一样珍贵。 甚至他们中的一个能判断出哪个测试阶段是延长的， 哪个是令人精疲力尽的噩梦，哪个只是一个有益的小麻烦。&lt;/p&gt;
&lt;p&gt;如果你是个新手，试着找一个你感兴趣的正在开发的程序，做一个好的beta测试员。 你会自然地从帮着测试，进
步到帮着抓臭虫，到最后帮着改程序。 你会从中学到很多，并且与未来会帮你的人结下友谊。&lt;/p&gt;
&lt;h3&gt;3，公布有用的信息&lt;/h3&gt;
&lt;p&gt;另一个好事是收集整理有用有趣的信息做成网页或文档如FAQ列表，且让他们容易获得。&lt;/p&gt;
&lt;p&gt;主要技术FAQ的维护者受到几乎同其他开放源代码的作者一样多的尊敬。&lt;/p&gt;
&lt;h3&gt;4，帮助维护基础设施的运转&lt;/h3&gt;
&lt;p&gt;黑客文化（还有Internet的工程方面的发展，就此而言）是靠自愿者运转的。 要使Internet能正常工作，就要有大量枯燥的工作不得不去完成——管理mail list，新闻组，维护大型软件库，开发RFC和其它技术标准等等。
做这类事情的人会得到很多尊敬，因为每人都知道这些事情是十分花时间又不象编程那样好玩。 做这些事情需要奉献精神。&lt;/p&gt;
&lt;h3&gt;5，为黑客文化本身服务&lt;/h3&gt;
&lt;p&gt;最后，你可以为这个文化本身做宣传（例如，象我这样，写一个“如何成为黑客”的正面的教程 :-) ） （译者：不知道Barret把它翻成中文算不算？）。 这并非一定要在你已经在这个圈子呆了很久，因以上四点中的某点而出名，有一定声誉后才能去做。&lt;/p&gt;
&lt;p&gt;黑客文化没有领袖。精确地说，它确实有些文化英雄、部落长者、历史学家和发言人。 若你在这圈内呆的够长，你或许成为其中之一。 记住：黑客们不相信他们的部落长者的自夸的炫耀， 因此大举追求这种名誉是危险的。与其奋力追求，不如先摆正自己的位置 等它自己到你的手中——那时则要做到谦虚和优雅。&lt;/p&gt;
&lt;h2&gt;黑客和书呆子(Nerd)的联系&lt;/h2&gt;
&lt;p&gt;同流行的迷思相反，做一名黑客并不一定要你是个书呆子。 但它确实有帮助，而且许多黑客事实上是书呆子。 做
一个深居简出的人有助于你集中精力进行十分重要的事情，如思考和编程。&lt;/p&gt;
&lt;p&gt;因此，很多黑客都愿意接受“书呆子”这个外号， 更有甚者使用更尖刻的“geek（怪人）”一词并引以为豪—— 这是一种宣布他们独立于主流社会的声明方式。访问 The Geek Page 参加更多的讨论。&lt;/p&gt;
&lt;p&gt;如果你能集中足够的精力做好黑客工作同时还能有正常的生活，这很好。 现在作到这一点比我在1970年代是新手的时候要容易的多； 如今主流文化对技术怪人要友善的多。 甚至有越来越多的人意识到黑客通常是很好的恋人和配偶的材料。&lt;/p&gt;
&lt;p&gt;如果你因为生活上不如意而迷上做黑客，那也没什么——至少你不会分神了。 或许以后你会找到自己的另一半。
风格的意义&lt;/p&gt;
&lt;p&gt;重申一下，作为一名黑客，你必须进入黑客精神之中。 当你不在计算机边上时，你仍然有很多对黑客工作有帮助的事情可做。 它们并不能替代真正的编程（没有什么能），但很多黑客都那么做， 并感到它们与黑客的本质存在某些基本的连系。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;学会流畅地用母语写作。尽管程序员不能写好文章的错误看法相当普遍， 但是有令人惊讶数目的黑客（包括所有我知道的最棒的）都是不错的作家。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阅读科幻小说。参加科幻小说讨论会。（一个碰到黑客和未来会成为黑客的人的好方法）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学禅，并且/或者练功习武。（精神修炼看来是惊人相似。）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;练就能分析音乐的听觉，学会鉴赏特别的音乐。学会玩某种乐器，或唱歌。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提高对双关语、文字游戏的鉴赏能力。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些事情，你已经做的越多，你就越是天生做黑客的材料。 至于为什么偏偏是这些事情，原因并不完全清楚， 但它们都涉及用到左－右脑能力的综合，这似乎是关键所在 （黑客们既需要清晰的逻辑思维，有时又需要偏离逻辑
跳出问题的表象）。&lt;/p&gt;
&lt;p&gt;最后，还有一些不要去做的事情。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;不要使用愚蠢的，哗众取宠的ID或昵称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要卷入Usenet（或其他地方的论坛）的骂战。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要自称为“cyberpunk（网络叛客）”，也不要浪费时间和那些人打交道。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要让你寄出的Email或张贴的帖子充满错误的拼写和乱七八糟的语法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;做以上的事情，只会招来嘲笑。黑客们个个记忆超群—— 你将需要数年的时间让他们忘记你犯下的错误。&lt;/p&gt;
&lt;p&gt;网名的问题值得深思。将身份隐藏在虚假的名字后是骇客、解密者、d00dz 及其他低等生物幼稚愚蠢的行为特点。黑客不会做这些事； 他们对他们所作的感到骄傲，而且乐于人们将作品与他们的 真名相联系。 因此, 若你现在用假名，放弃它。在黑客文化里它会令你你失败的。&lt;/p&gt;</summary><category term="黑客"></category><category term="编程"></category></entry><entry><title>Java设计模式在Common Lisp中的体现</title><link href="http://www.lizherui.com/pages/2013/08/04/lisp_design_patterns.html" rel="alternate"></link><updated>2013-08-04T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-08-04:pages/2013/08/04/lisp_design_patterns.html</id><summary type="html">&lt;p&gt;最近在进一步学习Java的过程中，我愈发感到Java把面向对象的编程思想玩到了登峰造极的地步。而Java中最能表现面向对象编程思想的，就是大名鼎鼎的设计模式了。&lt;/p&gt;
&lt;p&gt;这是Wikipedia中对设计模式的定义：设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。面向对象设计模式通常以类型或对象来描述其中的关系和相互作用，但不涉及用来完成应用程序的特定类型或对象。设计模式能使不稳定依赖于相对稳定、具体依赖于相对抽象，避免会引起麻烦的紧耦合，以增强软件设计面对并适应变化的能力。&lt;/p&gt;
&lt;p&gt;在学习了一些设计模式后，我们会发现这23种设计模式都围绕着以下三大基本原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;中意于组合而不是继承。&lt;/li&gt;
&lt;li&gt;依赖于接口而不是实现。&lt;/li&gt;
&lt;li&gt;高内聚，低耦合。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过，除了以上这些收获和感悟以外，我发现了一些更让人感兴趣的东西，这也是这篇文章马上要探讨的重点——Java设计模式在Common lisp中的体现。&lt;/p&gt;
&lt;p&gt;Java和Common lisp, 前者作为OO的代表，喜欢玩类和对象；后者作为Functional Programming的代表，喜欢玩函数和闭包。乍一看它俩应该风马牛不相及，井水不犯河水，但实际上我们会惊讶地发现Java设计模式中有着太多Common Lisp的对照，这种现象让人越来越强烈地感觉：软件设计虽然有众多的门派、风格和表现形式，但总体思想上似乎是殊途同归的，比如构造抽象屏障和提高抽象层次。&lt;/p&gt;
&lt;p&gt;Java至少有16种设计模式能对应到Common Lisp中，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="aaa" src="https://lh6.googleusercontent.com/--fbXkQDQfg0/Uf56NGxglbI/AAAAAAAAAGo/vpbBtYGAoxM/w414-h292-no/1.png" /&gt;&lt;/p&gt;
&lt;p&gt;Talk is cheap, let me show you the code.&lt;/p&gt;
&lt;p&gt;我们先来看看Singleton模式。&lt;/p&gt;
&lt;p&gt;Singleton模式有一个形象的比喻：Singleton就像追妹子一样，你不能大街上随便拉一个妹子就说是我对象，也不能自己做一个妹子出来说是自己对象。只能通过某种方法（追妹子），来产生一个对象。同时在调用这个方法的时候，会对你是否已经有对象进行检查。如果有，那么方法会直接返回，或者产生一个异常（抽你一巴掌，或者new Exception(”流氓!”)），从而保证你只有一个对象。&lt;/p&gt;
&lt;p&gt;这是一个线程安全的Java单例模式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;myInstance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myInstance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;synchronized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myInstance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;myInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;myInstance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Constructor code goes here.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个例子简单明了，核心思想是利用Java中函数 的访问权限控制实现单例。&lt;/p&gt;
&lt;p&gt;但是在Common Lisp中，没有访问权限控制，那怎么去实现单例呢？这就变得非常有意思了。不仅是Common Lisp，Python、Ruby等动态语言中都有一种非常强悍的编程机制——元编程。&lt;/p&gt;
&lt;p&gt;这是Wikipedia中对元编程的定义：元编程是指某类计算机程序的编写，这类计算机程序编写或者操纵其它程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。多数情况下，与手工编写全部代码相比，程序员可以获得更高的工作效率, 或者给与程序更大的灵活度去处理新的情形而无需重新编译。&lt;/p&gt;
&lt;p&gt;我们需要用到元编程思想中的一个重要应用——元类，即类的模板，元类的实例也是类。&lt;/p&gt;
&lt;p&gt;我们先定义一个元类:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defclass&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;standard&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;initform&lt;/span&gt; &lt;span class="n"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码阻止程序员直接实例化singleton-class，有点儿像Java的抽象类。&lt;/p&gt;
&lt;p&gt;然后为了严谨，我们对这个元类进行一些继承方面的限定。&lt;/p&gt;
&lt;p&gt;允许这个元类继承标准类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defmethod&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;superclass&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                                                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;superclass&lt;/span&gt; &lt;span class="n"&gt;standard&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;    
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;允许其它元类继承这个元类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defmethod&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;superclass&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                                                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;superclass&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不允许其它标准类继承这个元类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defmethod&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;superclass&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;standard&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                                                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;superclass&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后定义初始化实例函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defvar&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defmethod&lt;/span&gt; &lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pushnew&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再定义真正的make-instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defmethod&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;slots&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setf&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还可以定义一个reset-singleton-classes：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defun&lt;/span&gt; &lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;singletons&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
        &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;元类完事了，我们定义两个标准类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defclass&lt;/span&gt; &lt;span class="n"&gt;foo1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defclass&lt;/span&gt; &lt;span class="n"&gt;foo2&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;让我们测试一下，载入刚刚写好的test.lsp：&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://lh5.googleusercontent.com/-vhKXWOXzcBw/Uf56NAb3rlI/AAAAAAAAAGs/sR4IKun665k/w415-h297-no/2.png" /&gt; &lt;/p&gt;
&lt;p&gt;测试一下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://lh3.googleusercontent.com/-eeLFQSEwkOU/Uf56NPKq97I/AAAAAAAAAGw/jE0cTtiFY6g/w172-h108-no/3.png" /&gt; &lt;/p&gt;
&lt;p&gt;没有问题，我们还可以试一试刚才写的reset-singleton-classes：&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="https://lh5.googleusercontent.com/-ROPqd87viOk/Uf56OKLi-xI/AAAAAAAAAG8/aQnvijRXTvQ/w180-h99-no/4.png" /&gt; &lt;/p&gt;
&lt;p&gt;果然，foo1的单个实例被清空重建了。&lt;/p&gt;
&lt;p&gt;小结：Common Lisp中的元类，有一点像Java中的抽象类，比如不能被实例化，可以被继承等等。但元类跟抽象类仍然有着本质的不同：元类的实例是类，不是对象,于是能动态地创建类，更加灵活。Singleton模式具体的实现机制，是在元类中维护了一个内部队列来达到目的。&lt;/p&gt;
&lt;p&gt;张教主有这样一句名言：元编程是一种黑魔法，正派人士都很畏惧。&lt;/p&gt;
&lt;p&gt;我们再来看看工厂模式。&lt;/p&gt;
&lt;p&gt;下面是一个典型的Java工厂模式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Pizza&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;getPrice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// count the cents&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;HamAndMushroomPizza&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Pizza&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;getPrice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;850&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;DeluxePizza&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Pizza&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;getPrice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1050&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;HawaiianPizza&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Pizza&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;getPrice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1150&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;PizzaFactory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;PizzaType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;HamMushroom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Deluxe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Hawaiian&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Pizza&lt;/span&gt; &lt;span class="n"&gt;createPizza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PizzaType&lt;/span&gt; &lt;span class="n"&gt;pizzaType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pizzaType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;HamMushroom&lt;/span&gt;:
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HamAndMushroomPizza&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Deluxe&lt;/span&gt;:
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DeluxePizza&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Hawaiian&lt;/span&gt;:
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HawaiianPizza&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The pizza type &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pizzaType&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; is not recognized.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;PizzaLover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * Create all available pizzas and print their prices&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PizzaFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PizzaType&lt;/span&gt; &lt;span class="n"&gt;pizzaType&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PizzaFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PizzaType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Price of &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pizzaType&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;PizzaFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createPizza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pizzaType&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;getPrice&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;Price of HamMushroom is 850&lt;/p&gt;
&lt;p&gt;Price of Deluxe is 1050&lt;/p&gt;
&lt;p&gt;Price of Hawaiian is 1150&lt;/p&gt;
&lt;p&gt;在Common Lisp中，类和函数都是first class types ，即一等公民：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以被存储到变量中。&lt;/li&gt;
&lt;li&gt;可以作为参数传给其它。&lt;/li&gt;
&lt;li&gt;可以作为函数的返。&lt;/li&gt;
&lt;li&gt;可以在运行时被创造。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，Common Lisp实现工厂模式就显得简单粗暴了，或者说，根本用不着工厂模式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defclass&lt;/span&gt; &lt;span class="n"&gt;pizza&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;accessor&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defclass&lt;/span&gt; &lt;span class="n"&gt;ham&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mushroom&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;initform&lt;/span&gt; &lt;span class="mi"&gt;850&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defclass&lt;/span&gt; &lt;span class="n"&gt;deluxe&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;initform&lt;/span&gt; &lt;span class="mi"&gt;1050&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defclass&lt;/span&gt; &lt;span class="n"&gt;hawaiian&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;initform&lt;/span&gt; &lt;span class="mi"&gt;1150&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defparameter&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ham&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mushroom&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt;
        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;deluxe&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt;
        &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;hawaiian&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;载入测试一下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="https://lh5.googleusercontent.com/-YNmX58cxcDo/Uf56OIKW--I/AAAAAAAAAHA/W-vT08Kmtwo/w324-h112-no/5.png" /&gt;&lt;/p&gt;
&lt;p&gt;小结：Common Lisp中由于函数是一等公民的缘故，相对于Java中工厂模式的实现要简单的多，不需要额外建一个工厂类，可以随心所欲地玩。函数式语言相当于OO语言来说，确实有一个优点——可以操纵的单元粒度更小更细，所以更加灵活，同时也更加容易失控。&lt;/p&gt;
&lt;p&gt;最后，让我们看看迭代器模式，首先是Java中的实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ConcreteIterator&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ConcreteIterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
            &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;Aggregate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="nf"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ConcreteAggregate&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Aggregate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="nf"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConcreteIterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;Aggregate&lt;/span&gt; &lt;span class="n"&gt;ag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConcreteAggregate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;小明&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;ag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;小红&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;ag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;小刚&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;核心思想是在内部封装一个Arraylist，只对外暴露Iterator的基本接口，跟C++ STL中迭代器的设计基本一致。&lt;/p&gt;
&lt;p&gt;在Common Lisp中实现迭代器，我们只需要定义宏：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defmethod&lt;/span&gt; &lt;span class="nx"&gt;make&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(lambda (message)&lt;/span&gt;
&lt;span class="s1"&gt;      (case message&lt;/span&gt;
&lt;span class="s1"&gt;    (:next&lt;/span&gt;
&lt;span class="s1"&gt;     (let ((r (first collection)))&lt;/span&gt;
&lt;span class="s1"&gt;       (setf collection (cdr collection))&lt;/span&gt;
&lt;span class="s1"&gt;       (values r (null collection))))&lt;/span&gt;
&lt;span class="s1"&gt;    (:finished-p&lt;/span&gt;
&lt;span class="s1"&gt;     (null collection)))))&lt;/span&gt;

&lt;span class="s1"&gt;(defmethod cursor-next ((cursor function))&lt;/span&gt;
&lt;span class="s1"&gt;  (funcall cursor &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defmethod&lt;/span&gt; &lt;span class="nx"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;finished&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;funcall&lt;/span&gt; &lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;finished&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试一下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="7" src="https://lh3.googleusercontent.com/-nHpRPpSXzts/Uf56Obb5ufI/AAAAAAAAAHI/4lvgkQWPUBo/w415-h164-no/6.png" /&gt;&lt;/p&gt;
&lt;p&gt;小结：Common Lisp中由于自带序列，对迭代天然支持，所以相当于Java会更加简，天生的宏机制表现得畅快淋漓。&lt;/p&gt;
&lt;p&gt;总结：无论在Java还是Common Lisp中，设计模式虽然有不同的表现形式，但目标都一致的：构造抽象屏障，控制抽象层次，降低模块之间的耦合，尽量编写通用的组件。由于函数在Common Lisp中是一等公民的缘故，因此相对Java来说，Common Lisp的操作粒度更小，我们可以构造各种精巧的小函数并利用宏机制让各个小函数互相组合起来工作，显得更加简洁、灵活和强悍。但同时，这种特点也容易使整个项目的可控性受到威胁。而且Common Lisp这种函数式的数学思维，确实显得过于抽象了，不如Java的OO机制来得更加直观、更加贴近生活。&lt;/p&gt;
&lt;p&gt;在学习Java设计模式的过程中，除了开阔了自己的眼界，同时也勾起了我对函数式编程思想的美好怀念以及继续在课余时间学习SICP(&lt;a href="http://book.douban.com/subject/1148282"&gt;http://book.douban.com/subject/1148282&lt;/a&gt;)的动力。&lt;/p&gt;
&lt;p&gt;以前写Python的时候，我特别喜欢那4把宝剑——lambda、map、reduce、filter带来的随心所欲的编程快感。Java的设计模式对我开启了另一个世界的门——这个世界的疆域更加广阔，规则更加严谨，层次更加明显。&lt;/p&gt;
&lt;p&gt;最后，让我们用一个迷人的小故事来结束本文吧：&lt;/p&gt;
&lt;p&gt;在 ILC 2002 大会上前Lisp大神，当今的Python倡导者Peter Norvig，由于某些原因，做一个类似于马丁路德在梵蒂冈宣扬新教的主题演讲，因为他在演讲中大胆地声称Python就是一种Lisp。&lt;/p&gt;
&lt;p&gt;讲完后进入提问环节，出乎我意料的是，Peter点了我过道另一侧，靠上面几排座位的一个老头，他衣着皱褶，在演讲刚开始的时候踱步进来，然后就靠在了那个座位上面。&lt;/p&gt;
&lt;p&gt;这老头满头凌乱的白发，邋遢的白胡须，像是从旅行团中落下的游客，已经完全迷路了，闲逛到这里来歇歇脚，随便看看我们都在这里干什么。我的第一个念头是，他会因为我们的奇怪的话题感到相当失望；接着，我意识到这位
老头的年纪，想到斯坦福就在附近，而且我想那人也在斯坦福 —— 难道他是……&lt;/p&gt;
&lt;p&gt;“嗨，John，有什么问题？” Peter说。&lt;/p&gt;
&lt;p&gt;虽然这只是10个字左右的问题，我不会假装自己记住了Lisp之父约翰麦卡锡说的每一个字。他在问Python程序能
不能像处理数据一样，优雅地处理Python代码。&lt;/p&gt;
&lt;p&gt;“不行。John, Python做不到。” Peter就回答了这一句，然后静静地等待，准备接受教授的质疑，但老人没有再说什么了。此时，无语已胜千言。&lt;/p&gt;</summary><category term="java"></category><category term="lisp"></category><category term="设计模式"></category></entry><entry><title>今天我终于有了自己的独立域名</title><link href="http://www.lizherui.com/pages/2013/08/01/personal_domain.html" rel="alternate"></link><updated>2013-08-01T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-08-01:pages/2013/08/01/personal_domain.html</id><summary type="html">&lt;p&gt;今天折腾了半天，终于搞定了自己的独立域名：&lt;a href="http://www.lizherui.com"&gt;http://www.lizherui.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整个过程颇为曲折：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去&lt;a href="https://www.godaddy.com"&gt;https://www.godaddy.com&lt;/a&gt;上用支付宝花80多块钱购买为期一年的顶级域名，并去修改Nameservers为这两个地址：f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。&lt;/li&gt;
&lt;li&gt;去&lt;a href="https://www.dnspod.cn"&gt;https://www.dnspod.cn&lt;/a&gt;上添加新域名，并申请一条A记录指向Github Pages的ip:207.97.227.245；&lt;/li&gt;
&lt;li&gt;在Pelican主目录新建CNAME文件，添上刚刚申请的域名：www.lizherui.com。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有了独立域名后，感觉非常爽，更加坚定了好好打理个人博客的决心。&lt;/p&gt;</summary><category term="域名"></category><category term="godaddy"></category></entry><entry><title>爬取校招信息</title><link href="http://www.lizherui.com/pages/2013/07/31/spider.html" rel="alternate"></link><updated>2013-07-31T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-07-31:pages/2013/07/31/spider.html</id><summary type="html">&lt;p&gt;抓取北邮人论坛和水木社区校招信息的爬虫程序, 直接运行main.py即可在本机(&lt;a href="http://127.0.0.1:8888"&gt;http://127.0.0.1:8888&lt;/a&gt;)访问，非常简洁，可以扩展。&lt;/p&gt;
&lt;p&gt;此外，已经增加手机短信通知功能，移动、联通、电信都可以用。&lt;/p&gt;
&lt;p&gt;Talk is cheap, show you the code:&lt;a href="https://github.com/lizherui/spider_python"&gt;https://github.com/lizherui/spider_python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy it.&lt;/p&gt;</summary><category term="python"></category><category term="爬虫"></category></entry><entry><title>温暖的杭州人</title><link href="http://www.lizherui.com/pages/2013/07/27/hang_zhou_ren.html" rel="alternate"></link><updated>2013-07-27T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-07-27:pages/2013/07/27/hang_zhou_ren.html</id><summary type="html">&lt;p&gt;昨天傍晚我骑车去买水果，买完回去时忘记骑车了，没锁。快半夜才想起来这事，赶紧跑到已经关门的水果店门口，果然，车子没了。正当我郁闷地准备往回走时，没想到在水果店里看到了我的车子，一股暖意顿时涌上心头。&lt;/p&gt;
&lt;p&gt;我每天早上上班的时候会去楼下那个早餐店买包子。有一次买了4块5的东西，但是我手里只有4块零钱和20块整钱。我正准备给他20块钱，没想到他说：给4块钱得了，下次来的时候再给剩下的5毛吧。&lt;/p&gt;
&lt;p&gt;大家都知道江浙一代的人很会做生意，如今身临其境，确实开了眼界。这边做小本生意的人，不拘小节，也不看重短期的小利益，头脑、心态、眼光都很赞。&lt;/p&gt;
&lt;p&gt;这方面我会多加留意，用心学习。&lt;/p&gt;</summary><category term="杭州"></category></entry><entry><title>编辑器与IDE</title><link href="http://www.lizherui.com/pages/2013/07/25/editor_and_ide.html" rel="alternate"></link><updated>2013-07-25T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-07-25:pages/2013/07/25/editor_and_ide.html</id><summary type="html">&lt;p&gt;虽然eclim很强悍，但由于它并没有集成任何的java debug功能，因此用vim+eclim的组合开发java仍然显得力不从心。&lt;/p&gt;
&lt;p&gt;我最终决定回到eclipse的怀抱中。同时，出于对逐渐丧失vim武功的担忧，我决定使用eclipse+viplugin的组合：编辑代码使用vim的指法，其它事情全部交给eclipse。&lt;/p&gt;
&lt;p&gt;这样用了一段时间，节奏还不错，而且eclipse一些强大的功能让我刮目相看，并让我开始反思之前对待编辑器与IDE的态度。&lt;/p&gt;
&lt;p&gt;IDE里面确实蕴含了比普通文本编辑器高级很多的技术。IDE会对程序文本进行真正的解析，之后才开始分析里面的结构。它们的“跳转到定义”一般都是很精确的跳转，而不是像文本编辑器那样瞎猜。&lt;/p&gt;
&lt;p&gt;此外，IDE代码补全的精准度与速度都远远超过了vim的任何插件；IDE对于java的接口与实现、类与类的继承关系、反射等稍高级的功能都支持得非常好。&lt;/p&gt;
&lt;p&gt;vim在这些方面确实做得不好，也不可能做得好。&lt;/p&gt;
&lt;p&gt;这样说来，vim的唯一优势就只是它那极其符合人体工程学的指法带来的行云流水般的操作快感了。&lt;/p&gt;
&lt;p&gt;不像php, python等所见即所得的解释性语言，java这种编译型的语言，若通过打日志来调试，那么每加一条调试用的日志代码，就要重新编译一次，实在是太低效了。而eclipse的调试功能确实是太强大了，调试过程中每个变量的值也都是清清楚楚。&lt;/p&gt;
&lt;p&gt;很多长期使用vim/emacs的人都容易对IDE抱有或多或少的偏见。没错，开发shell, php, python, ruby这样的解释性语言，用vim/emacs确实非常合适，也能满足需求，相比之下用IDE开发它们就会显得有些笨拙。&lt;/p&gt;
&lt;p&gt;但是最近开发java的经历让我逐渐冷静了下来，开始仔细地反思这件事情。就像没有万能的编程语言一样，也没有万能的编辑器。vim很强悍，emacs也很厉害，但是它俩在面对java这样的语言时，确实无法跟eclipse相提并论。&lt;/p&gt;
&lt;p&gt;eclipse能让java程序员的头脑从琐碎的细节里面解脱出来，所以我们能够更加专注于程序本身的语义和算法，这样我们能写出更加优美和可靠的程序。这就是我用eclipse写java程序的时候相对于vim的感觉。我感觉到自己能够看见程序背后所表现的模型，而不只是看到程序的文本和细节。&lt;/p&gt;
&lt;p&gt;最后我想说的是，eclipse这件事情对我触动很大。我开始渐渐认可这样的观点：程序员对诸如编程语言、编辑器这类事物产生宗教般的信仰或偏见确实是没有必要的。我们应该更加多元化地发展，学会尊重别的技术和别的事物，学会去发现、认可每件技术的优势与劣势。&lt;/p&gt;
&lt;p&gt;天下武功，确实没有高低之分；只有习武之人，才有强弱之别。&lt;/p&gt;</summary><category term="编辑器"></category><category term="eclipse"></category><category term="vim"></category></entry><entry><title>滑雪</title><link href="http://www.lizherui.com/pages/2013/07/21/hua_xue.html" rel="alternate"></link><updated>2013-07-21T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-07-21:pages/2013/07/21/hua_xue.html</id><summary type="html">&lt;p&gt;没想到才来公司两周，就赶上了大型Outing。&lt;/p&gt;
&lt;p&gt;第一次滑雪还是在大二的冬天，跟着班上几个要好的同学去的北京郊区一个雪场。从那时起就对滑雪很有好感，很刺激。&lt;/p&gt;
&lt;p&gt;这次是跟着公司的人去滑雪。一路上让我愈发感到淘宝的人实在是太开放了，不停地开玩笑互黑。&lt;/p&gt;
&lt;p&gt;到雪场后，我直接选择了中级滑道。果然，几年没滑，非常生疏，连摔两次，屁股很痛。&lt;/p&gt;
&lt;p&gt;滑的途中我看到一个哥们不慎滑倒，更不幸的是脸砸到了滑板上，破了很大的一个口子，不住地流血，看样子是要破相了。他一脸黑线地坐在了一旁，一直用纸巾捂着脸上的伤口。&lt;/p&gt;
&lt;p&gt;我不知道他那时在想什么。这种倒霉的事情发生在任何人身上都会感到很郁闷。&lt;/p&gt;
&lt;p&gt;但是别忘了，滑雪是一个有风险的事情。&lt;/p&gt;
&lt;p&gt;每次从高台上出发时，我都在纠结，刚滑下去时要不要刹车减速。如果一开始就刹车减速，虽然不容易滑倒，但整个滑雪过程由于速度慢就不太刺激了；如果一开始就全速出发，虽然整个滑雪过程感到很刺激，但又比较容易失控滑倒。&lt;/p&gt;
&lt;p&gt;刺激or安全？风险or收益？怎么去平衡它们，怎么去不断地调节平衡点，是一件非常有意思的事情。&lt;/p&gt;
&lt;p&gt;晚上回到出租房，陪美女室友看完电视，帮她装自行车装到很晚。&lt;/p&gt;
&lt;p&gt;这些天，我感到这个出租房越来越有家的感觉了。白天各自上班，晚上大家一起看看电视聊聊天。&lt;/p&gt;
&lt;p&gt;说一下这个室友吧。人非常漂亮，从小到大都是班花。做事情也很不错，上得厅堂下得厨房，很讨人喜欢。作为一名新人hr，工作非常辛苦，每天回来也挺晚，总是黑眼圈，非常不容易。&lt;/p&gt;
&lt;p&gt;能找到这样的合租妹子，真是缘分。&lt;/p&gt;
&lt;p&gt;有的时候我强烈感觉，很多事情，仿佛就是事先设计好了一样。&lt;/p&gt;
&lt;p&gt;没错，这就是命。&lt;/p&gt;</summary><category term="淘宝"></category><category term="滑雪"></category></entry><entry><title>淘宝这个公司</title><link href="http://www.lizherui.com/pages/2013/07/13/taobao_vs_baidu.html" rel="alternate"></link><updated>2013-07-13T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-07-13:pages/2013/07/13/taobao_vs_baidu.html</id><summary type="html">&lt;p&gt;我来淘宝一周了。&lt;/p&gt;
&lt;p&gt;这一周在淘宝的所见所闻总是让我不自觉地联想起在百度工作的日子。&lt;/p&gt;
&lt;p&gt;我觉得是时候总结一下了。&lt;/p&gt;
&lt;h3&gt;团队氛围&lt;/h3&gt;
&lt;p&gt;百度沉闷，淘宝风骚。&lt;/p&gt;
&lt;p&gt;我喜欢把工程师分成两种人："书呆子""与"嬉皮士"。&lt;/p&gt;
&lt;p&gt;百度的工程师是典型的"书呆子"，就是校园里喜欢闷头闷脑搞学习、成绩总是排在年级最前面、平时不怎么爱说话的那批人，这其实也是大众眼里典型的技术男形象。&lt;/p&gt;
&lt;p&gt;但是，实际上，还有另外一种工程师，他们就是“嬉皮士”。&lt;/p&gt;
&lt;p&gt;淘宝的工程师是典型的“嬉皮士”。他们在学校里那会儿往往就不喜欢按部就班地搞学习，但是喜欢捣腾钻研自己真正感兴趣的东西；他们的期末总成绩往往不是年级顶尖，但是自己喜欢的学科却又是高分在上；他们特别喜欢互相开玩笑逗乐子，总是黑别人也总是被别人黑。&lt;/p&gt;
&lt;p&gt;在百度，说起大学的课堂，大家就开始讨论哪门课最难学，哪个老师讲课最有水平；&lt;/p&gt;
&lt;p&gt;在淘宝，说起大学的课堂，大家就开始讨论哪门课最易逃，哪个老师上课从不点名。&lt;/p&gt;
&lt;p&gt;我去百度面试，面试官总是给出几道算法题后让我慢慢想，然后就忙自己的事去了。整个面试过程特别闷。&lt;/p&gt;
&lt;p&gt;我去淘宝面试，面试官不仅和我交流互动，还特别喜欢拿我开玩笑。整个面试过程充满了欢声笑语。&lt;/p&gt;
&lt;p&gt;你是“书呆子”，还是“嬉皮士”？&lt;/p&gt;
&lt;h3&gt;工程师文化&lt;/h3&gt;
&lt;p&gt;百度封闭，淘宝开放。&lt;/p&gt;
&lt;p&gt;说到开放这个事情，我常常感叹于这个页面&lt;a href="https://github.com/alibaba"&gt;https://github.com/alibaba&lt;/a&gt;上这些大名鼎鼎的开源项目:Tengine, LVS, tfs, tair, oceanbase, fastjson, webx, taocode, zeus, ali_kernel, druid……&lt;/p&gt;
&lt;p&gt;百度什么都没有。&lt;/p&gt;
&lt;p&gt;封闭的工程师文化最大的影响就是各个部门甚至各个小组的开发人员做了很多类似的东西，看起来个体效率高，但整体效率就下去了，这也是百度加班极其严重的原因之一。我印象最深的事情是一个小项目需要用到memcached，开发人员居然自己在线上那几台机器搭建起来网上随便下载的某个版本的memcached。memcached这个级别的技术居然都不是全公司统一部署、管理。&lt;/p&gt;
&lt;p&gt;淘宝内网上有很多大家分享的技术心得和插件。就连新员工配置microsoft outlook/mac mail这种小事情，淘宝都有一键完成配置的插件可以下载。&lt;/p&gt;
&lt;p&gt;我觉得这是一件很严肃的事情，它反映了最根本的工程师态度：任何事情都要追求自动化。&lt;/p&gt;
&lt;p&gt;我在百度的时候问过好几次leader：团队里的各种大牛能不能分享一些技术tips，我自己也想分享vim一些强悍的配置技巧。但每次都被leader拍回去：这种事情还是有所保留为好。&lt;/p&gt;
&lt;h3&gt;技术风格&lt;/h3&gt;
&lt;p&gt;百度陈腐，淘宝花哨。&lt;/p&gt;
&lt;p&gt;百度使用Thinkpad + win 7/xp + 盗版的secureCRT + 百度的工程师随处可见。&lt;/p&gt;
&lt;p&gt;淘宝使用Macbook Pro/Air + Mac OS X + Vim/Emacs + Google的工程师随处可见。&lt;/p&gt;
&lt;p&gt;百度的工程师居然有相当一部人不知道github这样的网站，这在淘宝是不可想象的。&lt;/p&gt;
&lt;p&gt;这个话题我不想再对比了，百度被甩得很远。&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;如果你是“书呆子”，建议选择百度。&lt;/p&gt;
&lt;p&gt;如果你是“嬉皮士”，建议选择淘宝。&lt;/p&gt;</summary><category term="淘宝"></category><category term="百度"></category><category term="公司"></category></entry><entry><title>初到杭州</title><link href="http://www.lizherui.com/pages/2013/07/06/arrive_at_hangzhou.html" rel="alternate"></link><updated>2013-07-06T00:00:00+08:00</updated><author><name>lizherui</name></author><id>tag:www.lizherui.com,2013-07-06:pages/2013/07/06/arrive_at_hangzhou.html</id><summary type="html">&lt;p&gt;在入职淘宝的前一周，我来到杭州。&lt;/p&gt;
&lt;p&gt;我拖着行李刚走出火车，就被黑车党团团围住。好不容易挣脱了黑车党，打的士又陷入困境。一个人来到完全陌生的城市打拼，真的是很不容易。&lt;/p&gt;
&lt;p&gt;幸运的是，很快就在豆瓣找到了合租的人，并找到了一个不错的房子，虽然地段稍微有点远。不过以后可以考虑骑公共自行车上班，顺便锻炼身体。&lt;/p&gt;
&lt;p&gt;技术方面的话，自从5月底离开百度后就没怎么练了。再不练，武功就废了。坚持看完了SICP第二章，感到越来越吃力(实在太抽象了)，于是决定暂缓第三章的学习计划。考虑到淘宝大量使用JAVA,于是开始学习《JAVA编程思想》，想尽快入门JAVA。&lt;/p&gt;
&lt;p&gt;周末和向楠、倪灿在西湖旁边吃了个饭，聊了聊很多往事，感慨万千。&lt;/p&gt;
&lt;p&gt;下周一就要入职了，感觉压力很大。&lt;/p&gt;
&lt;p&gt;上路了，毕业生。&lt;/p&gt;
&lt;iframe height=498 width=510 src="http://player.youku.com/embed/XMzcwMzExNg==" frameborder=0 allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="杭州"></category><category term="淘宝"></category></entry></feed>